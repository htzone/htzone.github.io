<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何将bat文件转换为exe带图标的文件</title>
      <link href="2021/07/10/%E5%A6%82%E4%BD%95%E5%B0%86bat%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAexe%E5%B8%A6%E5%9B%BE%E6%A0%87%E7%9A%84%E6%96%87%E4%BB%B6/"/>
      <url>2021/07/10/%E5%A6%82%E4%BD%95%E5%B0%86bat%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAexe%E5%B8%A6%E5%9B%BE%E6%A0%87%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="如何将bat文件转换为exe带图标的文件"><a href="#如何将bat文件转换为exe带图标的文件" class="headerlink" title="如何将bat文件转换为exe带图标的文件"></a>如何将bat文件转换为exe带图标的文件</h2><p>最近闲来没事，写了很多用于自动化处理的批处理文件，但是看着一个个齿轮图标，一方面没有一点美观，另一方面也是很不好进行区分，于是有了把bat文件转换为exe图标的想法，接下来就介绍下整个操作过程。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li><p>需要下载一个转换工具</p><p>下载地址：<a href="https://pan.baidu.com/s/1npMc0-AI854_heA1xSDFgQ">https://pan.baidu.com/s/1npMc0-AI854_heA1xSDFgQ</a> 提取码：6666</p></li><li><p>你要转换的批处理文件</p><p>这里我随便写了一个run.bat用作测试，内容也很简单，就是执行jar文件。</p><p><img src="/2021/07/10/%E5%A6%82%E4%BD%95%E5%B0%86bat%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAexe%E5%B8%A6%E5%9B%BE%E6%A0%87%E7%9A%84%E6%96%87%E4%BB%B6/p1.png" alt="img"></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">java -jar automan2-0.0.1-SNAPSHOT.jar</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="进行转换"><a href="#进行转换" class="headerlink" title="进行转换"></a>进行转换</h3><ul><li>将下载好的转换工具安装好，然后打开。</li></ul><p><img src="/2021/07/10/%E5%A6%82%E4%BD%95%E5%B0%86bat%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAexe%E5%B8%A6%E5%9B%BE%E6%A0%87%E7%9A%84%E6%96%87%E4%BB%B6/p2.png" alt="img"></p><ul><li><p>将左上角，语言设置成简体中文，方便查看。</p></li><li><p>然后点击左上角选项 文件-&gt;打开 选择我们批处理文件的路径。</p></li></ul><p><img src="/2021/07/10/%E5%A6%82%E4%BD%95%E5%B0%86bat%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAexe%E5%B8%A6%E5%9B%BE%E6%A0%87%E7%9A%84%E6%96%87%E4%BB%B6/p3.png" alt="img"></p><p><img src="/2021/07/10/%E5%A6%82%E4%BD%95%E5%B0%86bat%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAexe%E5%B8%A6%E5%9B%BE%E6%A0%87%E7%9A%84%E6%96%87%E4%BB%B6/p4.png" alt="img"></p><ul><li>打开后会在主面板显示批处理文件内容，在右边的面板选择ico图标，我们需要将我们用作exe的图标转换为ico格式的，这里我提供一个在线的转换工具 <a href="https://www.bitbug.net/">https://www.bitbug.net</a></li></ul><p><img src="/2021/07/10/%E5%A6%82%E4%BD%95%E5%B0%86bat%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAexe%E5%B8%A6%E5%9B%BE%E6%A0%87%E7%9A%84%E6%96%87%E4%BB%B6/p5.png" alt="img"></p><ul><li>选择好图标后，我们点击转换选项执行转换，然后选择exe要保存的目录即可。</li></ul><p><img src="/2021/07/10/%E5%A6%82%E4%BD%95%E5%B0%86bat%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAexe%E5%B8%A6%E5%9B%BE%E6%A0%87%E7%9A%84%E6%96%87%E4%BB%B6/p6.png" alt="img"></p><p>我们需要把exe放在jar文件的目录中才能正常执行，因为该转换操作仅仅是把bat文件转换为exe，并没有将jar文件打包进去。</p><p>到此，我们的转换就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简化开发的Java常用工具库</title>
      <link href="2021/06/20/%E7%AE%80%E5%8C%96%E5%BC%80%E5%8F%91%E7%9A%84Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
      <url>2021/06/20/%E7%AE%80%E5%8C%96%E5%BC%80%E5%8F%91%E7%9A%84Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>Java开发中，我们常常都会封装自己的工具类库，今天就给大家介绍一些平时比较常用的工具类库框架及其使用，以使我们在平时的开发工作中能达到事半功倍的效果，提升我们的开发效率。</p><h2 id="Java自带工具方法"><a href="#Java自带工具方法" class="headerlink" title="Java自带工具方法"></a>Java自带工具方法</h2><h3 id="List集合拼接成以逗号分隔的字符串"><a href="#List集合拼接成以逗号分隔的字符串" class="headerlink" title="List集合拼接成以逗号分隔的字符串"></a>List集合拼接成以逗号分隔的字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如何把list集合拼接成以逗号分隔的字符串 a,b,c  </span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);  </span><br><span class="line"><span class="comment">// 第一种方法，可以用stream流  </span></span><br><span class="line">String join = list.stream().collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));  </span><br><span class="line">System.out.println(join); <span class="comment">// 输出 a,b,c  </span></span><br><span class="line"><span class="comment">// 第二种方法，其实String也有join方法可以实现这个功能  </span></span><br><span class="line">String join = String.join(<span class="string">&quot;,&quot;</span>, list);  </span><br><span class="line">System.out.println(join); <span class="comment">// 输出 a,b,c  </span></span><br></pre></td></tr></table></figure><h3 id="比较两个字符串是否相等，忽略大小写"><a href="#比较两个字符串是否相等，忽略大小写" class="headerlink" title="比较两个字符串是否相等，忽略大小写"></a>比较两个字符串是否相等，忽略大小写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (strA.equalsIgnoreCase(strB)) &#123;  </span><br><span class="line">  System.out.println(<span class="string">&quot;相等&quot;</span>);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="比较两个对象是否相等"><a href="#比较两个对象是否相等" class="headerlink" title="比较两个对象是否相等"></a>比较两个对象是否相等</h3><p>当我们用equals比较两个对象是否相等的时候，还需要对左边的对象进行判空，不然可能会报空指针异常，我们可以用java.util包下Objects封装好的比较是否相等的方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Objects.equals(strA, strB);  </span><br></pre></td></tr></table></figure><p> 源码是这样的 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="两个List集合取交集"><a href="#两个List集合取交集" class="headerlink" title="两个List集合取交集"></a>两个List集合取交集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line">list1.add(<span class="string">&quot;a&quot;</span>);  </span><br><span class="line">list1.add(<span class="string">&quot;b&quot;</span>);  </span><br><span class="line">list1.add(<span class="string">&quot;c&quot;</span>);  </span><br><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line">list2.add(<span class="string">&quot;a&quot;</span>);  </span><br><span class="line">list2.add(<span class="string">&quot;b&quot;</span>);  </span><br><span class="line">list2.add(<span class="string">&quot;d&quot;</span>);  </span><br><span class="line">list1.retainAll(list2);  </span><br><span class="line">System.out.println(list1); <span class="comment">// 输出[a, b]  </span></span><br></pre></td></tr></table></figure><h2 id="commons-lang，java-lang的增强版"><a href="#commons-lang，java-lang的增强版" class="headerlink" title="commons-lang，java.lang的增强版"></a>commons-lang，java.lang的增强版</h2><p>apache commons是最强大的，也是使用最广泛的工具类库，里面的子库非常多，下面介绍几个最常用的。建议使用commons-lang3，优化了一些api，原来的commons-lang已停止更新</p><p>Maven依赖是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure><h3 id="字符串判空"><a href="#字符串判空" class="headerlink" title="字符串判空"></a>字符串判空</h3><p>传参CharSequence类型是String、StringBuilder、StringBuffer的父类，都可以直接下面方法判空，以下是源码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(<span class="keyword">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> cs == <span class="keyword">null</span> || cs.length() == <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNotEmpty</span><span class="params">(<span class="keyword">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> !isEmpty(cs);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 判空的时候，会去除字符串中的空白字符，比如空格、换行、制表符  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBlank</span><span class="params">(<span class="keyword">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> strLen = length(cs);  </span><br><span class="line">    <span class="keyword">if</span> (strLen == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strLen; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!Character.isWhitespace(cs.charAt(i))) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNotBlank</span><span class="params">(<span class="keyword">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> !isBlank(cs);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="首字母转成大写"><a href="#首字母转成大写" class="headerlink" title="首字母转成大写"></a>首字母转成大写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;redpig&quot;</span>;  </span><br><span class="line">String capitalize = StringUtils.capitalize(str);  </span><br><span class="line">System.out.println(capitalize); <span class="comment">// 输出Redpig </span></span><br></pre></td></tr></table></figure><h3 id="重复拼接字符串"><a href="#重复拼接字符串" class="headerlink" title="重复拼接字符串"></a>重复拼接字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = StringUtils.repeat(<span class="string">&quot;ab&quot;</span>, <span class="number">2</span>);  </span><br><span class="line">System.out.println(str); <span class="comment">// 输出abab  </span></span><br></pre></td></tr></table></figure><h3 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h3><p> 再也不用手写SimpleDateFormat格式化了 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Date类型转String类型  </span></span><br><span class="line">String date = DateFormatUtils.format(<span class="keyword">new</span> Date(), <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);  </span><br><span class="line">System.out.println(date); <span class="comment">// 输出 2021-05-01 01:01:01  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// String类型转Date类型  </span></span><br><span class="line">Date date = DateUtils.parseDate(<span class="string">&quot;2021-05-01 01:01:01&quot;</span>, <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 计算一个小时后的日期  </span></span><br><span class="line">Date date = DateUtils.addHours(<span class="keyword">new</span> Date(), <span class="number">1</span>);  </span><br></pre></td></tr></table></figure><h3 id="包装临时对象"><a href="#包装临时对象" class="headerlink" title="包装临时对象"></a>包装临时对象</h3><p>当一个方法需要返回两个及以上字段时，我们一般会封装成一个临时对象返回，现在有了Pair和Triple就不需要了 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回两个字段  </span></span><br><span class="line">ImmutablePair&lt;Integer, String&gt; pair = ImmutablePair.of(<span class="number">1</span>, <span class="string">&quot;redpig&quot;</span>);  </span><br><span class="line">System.out.println(pair.getLeft() + <span class="string">&quot;,&quot;</span> + pair.getRight()); <span class="comment">// 输出 1,redpig  </span></span><br><span class="line"><span class="comment">// 返回三个字段  </span></span><br><span class="line">ImmutableTriple&lt;Integer, String, Date&gt; triple = ImmutableTriple.of(<span class="number">1</span>, <span class="string">&quot;redpig&quot;</span>, <span class="keyword">new</span> Date());  </span><br><span class="line">System.out.println(triple.getLeft() + <span class="string">&quot;,&quot;</span> + triple.getMiddle() + <span class="string">&quot;,&quot;</span> + triple.getRight()); <span class="comment">// 输出 1,redpig,Wed Apr 07 23:30:00 CST 2021  </span></span><br></pre></td></tr></table></figure><h2 id="commons-collections-集合工具类"><a href="#commons-collections-集合工具类" class="headerlink" title="commons-collections 集合工具类"></a>commons-collections 集合工具类</h2><p>Maven依赖是： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure><h3 id="集合判空"><a href="#集合判空" class="headerlink" title="集合判空"></a>集合判空</h3><p>封装了集合判空的方法，以下是源码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(<span class="keyword">final</span> Collection&lt;?&gt; coll)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> coll == <span class="keyword">null</span> || coll.isEmpty();  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNotEmpty</span><span class="params">(<span class="keyword">final</span> Collection&lt;?&gt; coll)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> !isEmpty(coll);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 两个集合取交集  </span></span><br><span class="line">Collection&lt;String&gt; collection = CollectionUtils.retainAll(listA, listB);  </span><br><span class="line"><span class="comment">// 两个集合取并集  </span></span><br><span class="line">Collection&lt;String&gt; collection = CollectionUtils.union(listA, listB);  </span><br><span class="line"><span class="comment">// 两个集合取差集  </span></span><br><span class="line">Collection&lt;String&gt; collection = CollectionUtils.subtract(listA, listB);  </span><br></pre></td></tr></table></figure><h2 id="common-beanutils-操作对象"><a href="#common-beanutils-操作对象" class="headerlink" title="common-beanutils 操作对象"></a>common-beanutils 操作对象</h2><p>Maven依赖： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>设置对象属性 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();  </span><br><span class="line">BeanUtils.setProperty(user, <span class="string">&quot;id&quot;</span>, <span class="number">1</span>);  </span><br><span class="line">BeanUtils.setProperty(user, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;redpig&quot;</span>);  </span><br><span class="line">System.out.println(BeanUtils.getProperty(user, <span class="string">&quot;name&quot;</span>)); <span class="comment">// 输出 redpig  </span></span><br><span class="line">System.out.println(user); <span class="comment">// 输出 &#123;&quot;id&quot;:1,&quot;name&quot;:&quot;redpig&quot;&#125;  </span></span><br></pre></td></tr></table></figure><p>对象和map互转 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象转map  </span></span><br><span class="line">Map&lt;String, String&gt; map = BeanUtils.describe(user);  </span><br><span class="line">System.out.println(map); <span class="comment">// 输出 &#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;redpig&quot;&#125;  </span></span><br><span class="line"><span class="comment">// map转对象  </span></span><br><span class="line">User newUser = <span class="keyword">new</span> User();  </span><br><span class="line">BeanUtils.populate(newUser, map);  </span><br><span class="line">System.out.println(newUser); <span class="comment">// 输出 &#123;&quot;id&quot;:1,&quot;name&quot;:&quot;redpig&quot;&#125;  </span></span><br></pre></td></tr></table></figure><h2 id="commons-io-文件流处理"><a href="#commons-io-文件流处理" class="headerlink" title="commons-io 文件流处理"></a>commons-io 文件流处理</h2><p>Maven依赖： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>文件处理 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;demo1.txt&quot;</span>);  </span><br><span class="line"><span class="comment">// 读取文件  </span></span><br><span class="line">List&lt;String&gt; lines = FileUtils.readLines(file, Charset.defaultCharset());  </span><br><span class="line"><span class="comment">// 写入文件  </span></span><br><span class="line">FileUtils.writeLines(<span class="keyword">new</span> File(<span class="string">&quot;demo2.txt&quot;</span>), lines);  </span><br><span class="line"><span class="comment">// 复制文件  </span></span><br><span class="line">FileUtils.copyFile(srcFile, destFile);  </span><br></pre></td></tr></table></figure><h2 id="Google-Guava-工具类库"><a href="#Google-Guava-工具类库" class="headerlink" title="Google Guava 工具类库"></a>Google Guava 工具类库</h2><p>Maven依赖： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Lists.newArrayList();  </span><br><span class="line">List&lt;Integer&gt; list = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);  </span><br><span class="line"><span class="comment">// 反转list  </span></span><br><span class="line">List&lt;Integer&gt; reverse = Lists.reverse(list);  </span><br><span class="line">System.out.println(reverse); <span class="comment">// 输出 [3, 2, 1]  </span></span><br><span class="line"><span class="comment">// list集合元素太多，可以分成若干个集合，每个集合10个元素  </span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; partition = Lists.partition(list, <span class="number">10</span>);  </span><br><span class="line">  </span><br><span class="line">Map&lt;String, String&gt; map = Maps.newHashMap();  </span><br><span class="line">Set&lt;String&gt; set = Sets.newHashSet();  </span><br></pre></td></tr></table></figure><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Lists.newArrayList();  </span><br><span class="line">List&lt;Integer&gt; list = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);  </span><br><span class="line"><span class="comment">// 反转list  </span></span><br><span class="line">List&lt;Integer&gt; reverse = Lists.reverse(list);  </span><br><span class="line">System.out.println(reverse); <span class="comment">// 输出 [3, 2, 1]  </span></span><br><span class="line"><span class="comment">// list集合元素太多，可以分成若干个集合，每个集合10个元素  </span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; partition = Lists.partition(list, <span class="number">10</span>);  </span><br><span class="line">  </span><br><span class="line">Map&lt;String, String&gt; map = Maps.newHashMap();  </span><br><span class="line">Set&lt;String&gt; set = Sets.newHashSet();  </span><br></pre></td></tr></table></figure><h3 id="Multimap-一个key可以映射多个value的HashMap"><a href="#Multimap-一个key可以映射多个value的HashMap" class="headerlink" title="Multimap 一个key可以映射多个value的HashMap"></a>Multimap 一个key可以映射多个value的HashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Multimap&lt;String, Integer&gt; map = ArrayListMultimap.create();  </span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>, <span class="number">1</span>);  </span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>, <span class="number">2</span>);  </span><br><span class="line">Collection&lt;Integer&gt; values = map.get(<span class="string">&quot;key&quot;</span>);  </span><br><span class="line">System.out.println(map); <span class="comment">// 输出 &#123;&quot;key&quot;:[1,2]&#125;  </span></span><br><span class="line"><span class="comment">// 还能返回你以前使用的臃肿的Map  </span></span><br><span class="line">Map&lt;String, Collection&lt;Integer&gt;&gt; collectionMap = map.asMap();  </span><br></pre></td></tr></table></figure><p>多省事，多简洁，省得你再创建 Map&lt;String, List&gt; </p><h3 id="BiMap-一种连value也不能重复的HashMap"><a href="#BiMap-一种连value也不能重复的HashMap" class="headerlink" title="BiMap 一种连value也不能重复的HashMap"></a>BiMap 一种连value也不能重复的HashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BiMap&lt;String, String&gt; biMap = HashBiMap.create();  </span><br><span class="line"><span class="comment">// 如果value重复，put方法会抛异常，除非用forcePut方法  </span></span><br><span class="line">biMap.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);  </span><br><span class="line">System.out.println(biMap); <span class="comment">// 输出 &#123;&quot;key&quot;:&quot;value&quot;&#125;  </span></span><br><span class="line"><span class="comment">// 既然value不能重复，何不实现个翻转key/value的方法，已经有了  </span></span><br><span class="line">BiMap&lt;String, String&gt; inverse = biMap.inverse();  </span><br><span class="line">System.out.println(inverse); <span class="comment">// 输出 &#123;&quot;value&quot;:&quot;key&quot;&#125;  </span></span><br></pre></td></tr></table></figure><p>这其实是双向映射，在某些场景还是很实用的。 </p><h3 id="Table-一种有两个key的HashMap"><a href="#Table-一种有两个key的HashMap" class="headerlink" title="Table 一种有两个key的HashMap"></a>Table 一种有两个key的HashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一批用户，同时按年龄和性别分组  </span></span><br><span class="line">Table&lt;Integer, String, String&gt; table = HashBasedTable.create();  </span><br><span class="line">table.put(<span class="number">18</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;yideng&quot;</span>);  </span><br><span class="line">table.put(<span class="number">18</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;Lily&quot;</span>);  </span><br><span class="line">System.out.println(table.get(<span class="number">18</span>, <span class="string">&quot;男&quot;</span>)); <span class="comment">// 输出 yideng  </span></span><br><span class="line"><span class="comment">// 这其实是一个二维的Map，可以查看行数据  </span></span><br><span class="line">Map&lt;String, String&gt; row = table.row(<span class="number">18</span>);  </span><br><span class="line">System.out.println(row); <span class="comment">// 输出 &#123;&quot;男&quot;:&quot;yideng&quot;,&quot;女&quot;:&quot;Lily&quot;&#125;  </span></span><br><span class="line"><span class="comment">// 查看列数据  </span></span><br><span class="line">Map&lt;Integer, String&gt; column = table.column(<span class="string">&quot;男&quot;</span>);  </span><br><span class="line">System.out.println(column); <span class="comment">// 输出 &#123;18:&quot;yideng&quot;&#125;  </span></span><br></pre></td></tr></table></figure><h3 id="Multiset-一种用来计数的Set"><a href="#Multiset-一种用来计数的Set" class="headerlink" title="Multiset /一种用来计数的Set"></a>Multiset /一种用来计数的Set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Multiset&lt;String&gt; multiset = HashMultiset.create();  </span><br><span class="line">multiset.add(<span class="string">&quot;apple&quot;</span>);  </span><br><span class="line">multiset.add(<span class="string">&quot;apple&quot;</span>);  </span><br><span class="line">multiset.add(<span class="string">&quot;orange&quot;</span>);  </span><br><span class="line">System.out.println(multiset.count(<span class="string">&quot;apple&quot;</span>)); <span class="comment">// 输出 2  </span></span><br><span class="line"><span class="comment">// 查看去重的元素  </span></span><br><span class="line">Set&lt;String&gt; set = multiset.elementSet();  </span><br><span class="line">System.out.println(set); <span class="comment">// 输出 [&quot;orange&quot;,&quot;apple&quot;]  </span></span><br><span class="line"><span class="comment">// 还能查看没有去重的元素  </span></span><br><span class="line">Iterator&lt;String&gt; iterator = multiset.iterator();  </span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;  </span><br><span class="line">    System.out.println(iterator.next());  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 还能手动设置某个元素出现的次数  </span></span><br><span class="line">multiset.setCount(<span class="string">&quot;apple&quot;</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令解析（持续更新）</title>
      <link href="2019/06/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>2019/06/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这里介绍一些平时经常使用到的Linux命令，一是为了加深印象，二是为了查询方便。</p><h2 id="ll命令"><a href="#ll命令" class="headerlink" title="ll命令"></a>ll命令</h2><p>ll可以用来查看文件及目录详情，但它并不是linux下一个基本的命令，它实际上是ls -l的一个别名。 </p><p>Ubuntu默认不支持命令ll，必须用 ls -l，这样使用起来不是很方便。 </p><p>如果要硬使用此命令，可以作如下修改：</p><ul><li>打开 ~/.bashrc</li><li>找到 #alias ll=’ls -l’，去掉前面的#就可以了。（关闭原来的终端才能使命令生效）</li><li>这样个人用户可以使用ll命令，当切换成超级用户后，使用ll命令时提示找不到命令，那是因为你只是修改了个人用户的配置，所以，切换成root后做相同的操作即可解决问题。</li></ul><div class="tip">我们可以通过修改~/.bashrc添加任何其他的命令别名。</div> ll命令结果说明 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x   2 root root 48 2019-11-27 16:34 test&#x2F;</span><br></pre></td></tr></table></figure><ul><li><p>第一个栏位，表示文件的属性。Linux的文件基本上分为三个属性：可读（r），可写（w），可执行（x）。 </p><ul><li><p>这里有十个格子可以添（具体程序实现时，实际上是十个bit位）。</p></li><li><p>第一个字母表示文件类型</p><ul><li> ”-”,普通文件. </li><li> ”d”目录,字母”d”,是dirtectory(目录)的缩写. </li><li> “l”符号链接.</li><li> “b”块设备文件.</li><li> “c”字符设备文件.</li></ul></li><li><p>紧接着的3*3个字符分3组，各指示此文件的读、写、执行权限，对于owner、group、others而言。</p></li><li><p>因为Linux是多用户多任务系统，所以一个文件可能同时被许多人使用，所以我们一定要设好每个文件的权限，其文件的权限位置排列顺序是（以-rwxr-xr-x为例): rwx(Owner)r-x(Group)r-x(Other)</p></li></ul></li><li><p> 第二个栏位，表示文件个数。如果是文件的话，那这个数目自然是1了，如果是目录的话，那它的数目就是该目录中的文件个数了。 </p></li><li><p> 第三个栏位，表示该文件或目录的拥有者。若使用者目前处于自己的Home,那这一栏大概都是它的账号名称。 </p></li><li><p> 第四个栏位，表示所属的组（group）。每一个使用者都可以拥有一个以上的组，不过大部分的使用者应该都只属于一个组，只有当系统管理员希望给予某使用者特殊权限时，才可能会给他另一个组。</p></li><li><p> 第五栏位，表示文件大小。文件大小用byte来表示，而空目录一般都是1024byte，当然可以用其它参数使文件显示的单位不同，如使用ls –k就是用kb莱显示一个文件的大小单位，不过一般我们还是以byte为主。 </p></li><li><p>  第六个栏位，表示最后一次修改时间。以“月，日，时间”的格式表示，如Aug 15 5:46表示8月15日早上5:46分。 </p></li><li><p> 第七个栏位，表示文件名。我们可以用ls –a显示隐藏的文件名。 </p></li></ul><h2 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h2><p>常用的Linux文件权限：<br>  444 r–r–r–<br>  600 rw——-<br>  644 rw-r–r–<br>  666 rw-rw-rw-<br>  700 rwx——<br>  744 rwxr–r–<br>  755 rwxr-xr-x<br>  777 rwxrwxrwx  </p><p>具体的权限是由数字来表示的，读取的权限等于4，用r表示；写入的权限等于2，用w表示；执行的权限等于1，用x表示； </p><p>通过4、2、1的组合，得到以下几种权限：0（没有权限）；4（读取权限）；5（4+1 | 读取+执行）；6（4+2 | 读取+写入）；7（4+2+1 | 读取+写入+执行） </p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [选项] [文件..]</span><br></pre></td></tr></table></figure><p>权限范围：</p><p>u, User　　　  即文件或目录的拥有者<br>g, Group　　　即文件或目录的所属群组<br>o, Other　　　 除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围<br>a, All　　　　   即全部的用户，包含拥有者，所属群组以及其他用户<br>r　　　　　　  读取权限，数字代号为“4” 即 “100”<br>w　　　　　　 写入权限，数字代号为“2” 即 “010”<br>x　　　　　　  执行或切换权限，数字代号为“1” 即 “001”<br>“-“                       不具任何权限，数字代号为“0” 即 “000”  </p><p>目录选项：</p><p> -c,–changes　　　　　　　　　  效果类似“-v”参数，但仅回报更改的部分<br>-f,–quiet,–silent　　　　　　　　 不显示错误信息<br>-R,–recursive　　　　　　　  　 递归处理，将指令目录下的所有文件及子目录一并处理<br>-v,–verbose　　　　　　　　　　显示指令执行过程<br>–reference=<file>　  　　　　  把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同<br>&lt;权限范围&gt;+&lt;权限&gt;　　    　 增加指定权限 (chmod u+r file)<br>&lt;权限范围&gt;-&lt;权限&gt;　　 　　　　删除指定权限 (chmod g-rw file)<br>&lt;权限范围&gt;=&lt;权限&gt;　　　　　　 等于指定权限 (chmod o=rwx file) </file></p><p>举例：</p><p> 增加1.txt 所属组的 写 权限 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod g+w 1.txt </span><br></pre></td></tr></table></figure><p> 删除 2.txt 其他用户的 读 权限，同时增加所属组的写权限 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod o-r,g+w 2.txt </span><br></pre></td></tr></table></figure><p> 修改 3.txt 的权限为 u=rwx,g=rw,o=- </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u&#x3D;rwx,g&#x3D;rw,o&#x3D;- 3.txt </span><br></pre></td></tr></table></figure><p> 用数字 修改 4.txt 的权限 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 4.txt </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装与配置JDK</title>
      <link href="2019/06/24/Linux%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEJDK/"/>
      <url>2019/06/24/Linux%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEJDK/</url>
      
        <content type="html"><![CDATA[<h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>所用版本信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">操作系统：CentOS-7.9</span><br><span class="line">JDK版本：JDK8</span><br></pre></td></tr></table></figure><p>JDK下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">网盘链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1NdpXyniO2Ka7eB84A4-OAw</span><br><span class="line">提取码：6666</span><br></pre></td></tr></table></figure><div class="tip">这里我使用的Oracle官方的JDK，而非OpenJDK，因为OpenJDK很多功能不太全，不太建议使用。</div>然后将下载的JDK通过FileZilla传至Linux服务器的root目录 <p><img src="/2019/06/24/Linux%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEJDK/p1.png" alt="img"></p><p>接下来解压JDK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u211-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>然后创建JDK的存放目录 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;java</span><br></pre></td></tr></table></figure><p>将解压后的文件内容，拷贝到刚刚新建的目录（/usr/local/java）下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv jdk1.8.0_211 &#x2F;usr&#x2F;local&#x2F;java&#x2F;</span><br></pre></td></tr></table></figure><h2 id="配置JDK"><a href="#配置JDK" class="headerlink" title="配置JDK"></a>配置JDK</h2><p>配置JDK的环境变量，通过vi /etc/profile命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>然后在打开的文件末尾添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_211</span><br><span class="line">export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jar:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br><span class="line">export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</span><br></pre></td></tr></table></figure><p><img src="/2019/06/24/Linux%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEJDK/p2.png" alt="img"></p><p>然后通过如下命令查看是否配置成功，有版本号就说明配置成功了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="/2019/06/24/Linux%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEJDK/p3.png" alt="img"></p><p>OK，以上就是Linux系统上安装配置JDK的全部过程了，希望对大家有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常体系以及应用</title>
      <link href="2018/06/28/Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>2018/06/28/Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>之前我们介绍的基本类型、类、接口、枚举都是在表示和操作数据，操作的过程中可能有很多出错的情况，出错的原因可能是多方面的，有的是不可控的内部原因，比如内存不够了、磁盘满了，有的是不可控的外部原因，比如网络连接有问题，更多的可能是程序的编程错误，比如引用变量未初始化就直接调用实例方法。</p><p>这些非正常情况在Java中统一被认为是异常，Java使用异常机制来统一处理，接下来我们会介绍对异常的初步认识，异常类本身，以及对异常的处理等相关知识。</p><p>好了，我们先来通过一些例子认识一下异常。</p><h2 id="初识异常"><a href="#初识异常" class="headerlink" title="初识异常"></a>初识异常</h2><h3 id="NullPointerException-空指针异常"><a href="#NullPointerException-空指针异常" class="headerlink" title="NullPointerException (空指针异常)"></a>NullPointerException (空指针异常)</h3><p>我们来看段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="keyword">null</span>;</span><br><span class="line">        s.indexOf(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量s没有初始化就调用其实例方法indexOf，运行，屏幕输出为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NullPointerException</span><br><span class="line">    at ExceptionTest.main(ExceptionTest.java:<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>输出是告诉我们：在ExceptionTest类的main函数中，代码第5行，出现了空指针异常(java.lang.NullPointerException)。</p><p>但，具体发生了什么呢？当执行s.indexOf(“a”)的时候，Java系统发现s的值为null，没有办法继续执行了，这时就启用异常处理机制，首先创建一个异常对象，这里是类NullPointerException的对象，然后查找看谁能处理这个异常，在示例代码中，没有代码能处理这个异常，Java就启用默认处理机制，那就是打印异常栈信息到屏幕，并退出程序。</p><p>异常栈信息就包括了从异常发生点到最上层调用者的轨迹，还包括行号，可以说，这个栈信息是分析异常最为重要的信息。</p><p>Java的默认异常处理机制是退出程序，异常发生点后的代码都不会执行，所以示例代码中最后一行System.out.println(“end”)不会执行。</p><h3 id="NumberFormatException-数字格式异常"><a href="#NumberFormatException-数字格式异常" class="headerlink" title="NumberFormatException (数字格式异常)"></a>NumberFormatException (数字格式异常)</h3><p>我们再来看一个例子，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(args.length&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入数字&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>args表示命令行参数，这段代码要求参数为一个数字，它通过Integer.parseInt将参数转换为一个整数，并输出这个整数。参数是用户输入的，我们没有办法强制用户输入什么，如果用户输的是数字，比如123，屏幕会输出123，但如果用户输的不是数字，比如abc，屏幕会输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NumberFormatException: For input string: &quot;abc&quot;</span><br><span class="line">    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)</span><br><span class="line">    at java.lang.Integer.parseInt(Integer.java:492)</span><br><span class="line">    at java.lang.Integer.parseInt(Integer.java:527)</span><br><span class="line">    at ExceptionTest.main(ExceptionTest.java:7)</span><br></pre></td></tr></table></figure><p>出现了异常NumberFormatException。这个异常是怎么产生的呢？根据异常栈信息，我们看相关代码：</p><p>这是NumberFormatException类65行附近代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">64</span> <span class="function"><span class="keyword">static</span> NumberFormatException <span class="title">forInputString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="number">65</span>     <span class="keyword">return</span> <span class="keyword">new</span> NumberFormatException(<span class="string">&quot;For input string: \&quot;&quot;</span> + s + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line"><span class="number">66</span> &#125;</span><br></pre></td></tr></table></figure><p>这是Integer类492行附近代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">490</span> digit = Character.digit(s.charAt(i++),radix);</span><br><span class="line"><span class="number">491</span> <span class="keyword">if</span> (digit &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">492</span>     <span class="keyword">throw</span> NumberFormatException.forInputString(s);</span><br><span class="line"><span class="number">493</span> &#125;</span><br><span class="line"><span class="number">494</span> <span class="keyword">if</span> (result &lt; multmin) &#123;</span><br><span class="line"><span class="number">495</span>     <span class="keyword">throw</span> NumberFormatException.forInputString(s);</span><br><span class="line"><span class="number">496</span> &#125;</span><br></pre></td></tr></table></figure><p>将这两处合为一行，主要代码就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(...)</span><br></pre></td></tr></table></figure><p>new NumberFormatException(…)是我们容易理解的，就是创建了一个类的对象，只是这个类是一个异常类。throw是什么意思呢？就是抛出异常，它会触发Java的异常处理机制。在之前的空指针异常中，我们没有看到throw的代码，可以认为throw是由Java虚拟机自己实现的。</p><p>throw关键字可以与return关键字进行对比，return代表正常退出，throw代表异常退出，return的返回位置是确定的，就是上一级调用者，而throw后执行哪行代码则经常是不确定的，由异常处理机制动态确定。</p><p>异常处理机制会从当前函数开始查找看谁”捕获”了这个异常，当前函数没有就查看上一层，直到主函数，如果主函数也没有，就使用默认机制，即输出异常栈信息并退出，这正是我们在屏幕输出中看到的。</p><p>对于屏幕输出中的异常栈信息，程序员是可以理解的，但普通用户无法理解，也不知道该怎么办，我们需要给用户一个更为友好的信息，告诉用户，他应该输入的是数字，要做到这一点，我们需要自己”捕获”异常。</p><p>“捕获”是指使用try/catch关键字，我们看捕获异常后的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(args.length&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入数字&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            System.out.println(num);    </span><br><span class="line">        &#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;参数&quot;</span>+args[<span class="number">0</span>]</span><br><span class="line">                    +<span class="string">&quot;不是有效的数字，请输入数字&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用try/catch捕获并处理了异常，try后面的大括号{}内包含可能抛出异常的代码，括号后的catch语句包含能捕获的异常和处理代码，catch后面括号内是异常信息，包括异常类型和变量名，这里是NumberFormatException e，通过它可以获取更多异常信息，大括号{}内是处理代码，这里输出了一个更为友好的提示信息。</p><p>捕获异常后，程序就不会异常退出了，但try语句内异常点之后的其他代码就不会执行了，执行完catch内的语句后，程序会继续执行catch大括号外的代码。</p><p>这样，我们就对异常有了一个初步的了解，异常是相对于return的一种退出机制，可以由系统触发，也可以由程序通过throw语句触发，异常可以通过try/catch语句进行捕获并处理，如果没有捕获，则会导致程序退出并输出异常栈信息。异常有不同的类型，接下来，我们来认识一下。</p><h2 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h2><h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><p>NullPointerException和NumberFormatException都是异常类，所有异常类都有一个共同的父类Throwable，它有4个public构造方法：</p><ol><li>public Throwable()</li><li>public Throwable(String message)</li><li>public Throwable(String message, Throwable cause)</li><li>public Throwable(Throwable cause) </li></ol><p>有两个主要参数，一个是message，表示异常消息，另一个是cause，表示触发该异常的其他异常。异常可以形成一个异常链，上层的异常由底层异常触发，cause表示底层异常。</p><p>Throwable还有一个public方法用于设置cause：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Throwable <span class="title">initCause</span><span class="params">(Throwable cause)</span></span></span><br></pre></td></tr></table></figure><p>Throwable的某些子类没有带cause参数的构造方法，就可以通过这个方法来设置，这个方法最多只能被调用一次。</p><p>所有构造方法中都有一句重要的函数调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fillInStackTrace();</span><br></pre></td></tr></table></figure><p>它会将异常栈信息保存下来，这是我们能看到异常栈的关键。</p><p>Throwable有一些常用方法用于获取异常信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>打印异常栈信息到标准错误输出流，它还有两个重载的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">(PrintStream s)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">(PrintWriter s)</span></span></span><br></pre></td></tr></table></figure><p>打印栈信息到指定的流，关于PrintStream和PrintWriter我们后续文章介绍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Throwable <span class="title">getCause</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>获取设置的异常message和cause</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StackTraceElement[] getStackTrace()</span><br></pre></td></tr></table></figure><p>获取异常栈每一层的信息，每个StackTraceElement包括文件名、类名、函数名、行号等信息。</p><h2 id="异常类体系"><a href="#异常类体系" class="headerlink" title="异常类体系"></a>异常类体系</h2><p>以Throwable为根，Java API中定义了非常多的异常类，表示各种类型的异常，部分类示意如下：</p><p><img src="/2018/06/28/Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8_p1.png" alt="img"></p><p>Throwable是所有异常的基类，它有两个子类Error和Exception。</p><p>Error表示系统错误或资源耗尽，由Java系统自己使用，应用程序不应抛出和处理，比如图中列出的虚拟机错误(VirtualMacheError)及其子类内存溢出错误(OutOfMemoryError)和栈溢出错误(StackOverflowError)。</p><p>Exception表示应用程序错误，它有很多子类，应用程序也可以通过继承Exception或其子类创建自定义异常，图中列出了三个直接子类：IOException(输入输出I/O异常)，SQLException(数据库SQL异常)，RuntimeException(运行时异常)。</p><p>RuntimeException(运行时异常)比较特殊，它的名字有点误导，因为其他异常也是运行时产生的，它表示的实际含义是unchecked exception (未受检异常)，相对而言，Exception的其他子类和Exception自身则是checked exception (受检异常)，Error及其子类也是unchecked exception。</p><p>checked还是unchecked，区别在于Java如何处理这两种异常，对于checked异常，Java会强制要求程序员进行处理，否则会有编译错误，而对于unchecked异常则没有这个要求。</p><p>RuntimeException也有很多子类，下表列出了其中常见的一些：</p><table><thead><tr><th>异常</th><th>说明</th></tr></thead><tbody><tr><td>NullPointerException</td><td>空指针异常</td></tr><tr><td>IllegalStateException</td><td>非法状态</td></tr><tr><td>ClassCastException</td><td>非法强制类型转换</td></tr><tr><td>IllegalArgumentException</td><td>参数错误</td></tr><tr><td>NumberFormatException</td><td>数字格式错误</td></tr><tr><td>IndexOutOfBoundsException</td><td>索引越界</td></tr><tr><td>ArrayIndexOutOfBoundsException</td><td>数组索引越界</td></tr><tr><td>StringIndexOutOfBoundsException</td><td>字符串索引越界</td></tr></tbody></table><p>这么多不同的异常类其实并没有比Throwable这个基类多多少属性和方法，大部分类在继承父类后只是定义了几个构造方法，这些构造方法也只是调用了父类的构造方法，并没有额外的操作。</p><p>那为什么定义这么多不同的类呢？主要是为了名字不同，异常类的名字本身就代表了异常的关键信息，无论是抛出还是捕获异常时，使用合适的名字都有助于代码的可读性和可维护性。</p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>除了Java API中定义的异常类，我们也可以自己定义异常类，一般通过继承Exception或者它的某个子类，如果父类是RuntimeException或它的某个子类，则自定义异常也是unchecked exception，如果是Exception或Exception的其他子类，则自定义异常是checked exception。</p><p>我们通过继承Exception来定义一个异常，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppException</span><span class="params">(String message,</span></span></span><br><span class="line"><span class="function"><span class="params">            Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和很多其他异常类一样，我们没有定义额外的属性和代码，只是继承了Exception，定义了构造方法并调用了父类的构造方法。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="catch匹配"><a href="#catch匹配" class="headerlink" title="catch匹配"></a>catch匹配</h3><p>上面我们简单介绍了使用try/catch捕获异常，其中catch只有一条，其实，catch还可以有多条，每条对应一个异常类型，比如说：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能触发异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;not valid number&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(RuntimeException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;runtime exception &quot;</span>+e.getMessage());</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常处理机制将根据抛出的异常类型找第一个匹配的catch块，找到后，执行catch块内的代码，其他catch块就不执行了，如果没有找到，会继续到上层方法中查找。需要注意的是，抛出的异常类型是catch中声明异常的子类也算匹配，所以需要将最具体的子类放在前面，如果基类Exception放在前面，则其他更具体的catch代码将得不到执行。</p><p>示例也演示了对异常信息的利用，e.getMessage()获取异常消息，e.printStackTrace()打印异常栈到标准错误输出流。通过这些信息有助于理解为什么会出异常，这是解决编程错误的常用方法。示例是直接将信息输出到标准流上，实际系统中更常用的做法是输出到专门的日志中。</p><h3 id="重新throw"><a href="#重新throw" class="headerlink" title="重新throw"></a>重新throw</h3><p>在catch块内处理完后，可以重新抛出异常，异常可以是原来的，也可以是新建的，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能触发异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;not valid number&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AppException(<span class="string">&quot;输入格式不正确&quot;</span>, e);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于Exception，在打印出异常栈后，就通过throw e重新抛出了。</p><p>而对于NumberFormatException，我们重新抛出了一个AppException，当前Exception作为cause传递给了AppException，这样就形成了一个异常链，捕获到AppException的代码可以通过getCause()得到NumberFormatException。</p><p>为什么要重新抛出呢？因为当前代码不能够完全处理该异常，需要调用者进一步处理。</p><p>为什么要抛出一个新的异常呢？当然是当前异常不太合适，不合适可能是信息不够，需要补充一些新信息，还可能是过于细节，不便于调用者理解和使用，如果调用者对细节感兴趣，还可以继续通过getCause()获取到原始异常。</p><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>异常机制中还有一个重要的部分，就是finally, catch后面可以跟finally语句，语法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能抛出异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">//捕获异常</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//不管有无异常都执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>finally内的代码不管有无异常发生，都会执行。具体来说：</p><ul><li>如果没有异常发生，在try内的代码执行结束后执行。</li><li>如果有异常发生且被catch捕获，在catch内的代码执行结束后执行</li><li>如果有异常发生但没被捕获，则在异常被抛给上层之前执行。</li></ul><p>由于finally的这个特点，它一般用于释放资源，如数据库连接、文件流等。</p><p>try/catch/finally语法中，catch不是必需的，也就是可以只有try/finally，表示不捕获异常，异常自动向上传递，但finally中的代码在异常发生后也执行。</p><p><font color="#0000FF">finally语句有一个执行细节，如果在try或者catch语句内有return语句，则return语句在finally语句执行结束后才执行，但finally并不能改变返回值。</font>我们来看下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        ret = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的返回值是0，而不是2，实际执行过程是，在执行到try内的return ret;语句前，会先将返回值ret保存在一个临时变量中，然后才执行finally语句，最后try再返回那个临时变量，finally中对ret的修改不会被返回。</p><p><font color="#0000FF">如果在finally中也有return语句呢？try和catch内的return会丢失，实际会返回finally中的返回值。finally中有return不仅会覆盖try和catch内的返回值，还会掩盖try和catch内的异常，就像异常没有发生一样。</font>比如说：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码中，5/0会触发ArithmeticException，但是finally中有return语句，这个方法就会返回2，而不再向上传递异常了。</p><p><font color="#0000FF">finally中不仅return语句会掩盖异常，如果finally中抛出了异常，则原异常就会被掩盖。</font>看下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>finally中抛出了RuntimeException，则原异常ArithmeticException就丢失了。</p><p><font color="#0000FF">所以，一般而言，为避免混淆，应该避免在finally中使用return语句或者抛出异常，如果调用的其他代码可能抛出异常，则应该捕获异常并进行处理。</font></p><p><strong>throws</strong></p><p>异常机制中，还有一个和throw很像的关键字throws，用于声明一个方法可能抛出的异常，语法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> AppException, SQLException, NumberFormatException </span>&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>throws跟在方法的括号后面，可以声明多个异常，以逗号分隔。这个声明的含义是说，我这个方法内可能抛出这些异常，我没有进行处理，至少没有处理完，调用者必须进行处理。这个声明没有说明，具体什么情况会抛出什么异常，作为一个良好的实践，应该将这些信息用注释的方式进行说明，这样调用者才能更好的处理异常。</p><p>对于RuntimeException(unchecked exception)，是不要求使用throws进行声明的，但对于checked exception，则必须进行声明，换句话说，如果没有声明，则不能抛出。</p><p>对于checked exception，不可以抛出而不声明，但可以声明抛出但实际不抛出，不抛出声明它干嘛？主要用于在父类方法中声明，父类方法内可能没有抛出，但子类重写方法后可能就抛出了，子类不能抛出父类方法中没有声明的checked exception，所以就将所有可能抛出的异常都写到父类上了。</p><p>如果一个方法内调用了另一个声明抛出checked exception的方法，则必须处理这些checked exception，不过，处理的方式既可以是catch，也可以是继续使用throws，如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tester</span><span class="params">()</span> <span class="keyword">throws</span> AppException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;  <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>对于test抛出的SQLException，这里使用了catch，而对于AppException，则将其添加到了自己方法的throws语句中，表示当前方法也处理不了，还是由上层处理吧。</p><h2 id="Checked对比Unchecked-Exception"><a href="#Checked对比Unchecked-Exception" class="headerlink" title="Checked对比Unchecked Exception"></a>Checked对比Unchecked Exception</h2><p>以上，可以看出RuntimeException(unchecked exception)和checked exception的区别，checked exception必须出现在throws语句中，调用者必须处理，Java编译器会强制这一点，而RuntimeException则没有这个要求。</p><p>为什么要有这个区分呢？我们自己定义异常的时候应该使用checked还是unchecked exception啊？对于这个问题，业界有各种各样的观点和争论，没有特别一致的结论。</p><p>一种普遍的说法是，RuntimeException(unchecked)表示编程的逻辑错误，编程时应该检查以避免这些错误，比如说像空指针异常，如果真的出现了这些异常，程序退出也是正常的，程序员应该检查程序代码的bug而不是想办法处理这种异常。Checked exception表示程序本身没问题，但由于I/O、网络、数据库等其他不可预测的错误导致的异常，调用者应该进行适当处理。</p><p>但其实编程错误也是应该进行处理的，尤其是，Java被广泛应用于服务器程序中，不能因为一个逻辑错误就使程序退出。所以，目前一种更被认同的观点是，Java中的这个区分是没有太大意义的，可以统一使用RuntimeException即unchcked exception来代替。</p><p>这个观点的基本理由是，无论是checked还是unchecked异常，无论是否出现在throws声明中，我们都应该在合适的地方以适当的方式进行处理，而不是只为了满足编译器的要求，盲目处理异常，既然都要进行处理异常，checked exception的强制声明和处理就显得啰嗦，尤其是在调用层次比较深的情况下。</p><p>其实观点本身并不太重要，更重要的是一致性，一个项目中，应该对如何使用异常达成一致，按照约定使用即可。Java中已有的异常和类库也已经在哪里，我们还是要按照他们的要求进行使用。</p><h2 id="如何使用异常"><a href="#如何使用异常" class="headerlink" title="如何使用异常"></a>如何使用异常</h2><p>针对异常，我们介绍了try/catch/finally, catch匹配、重新抛出、throws、checked/unchecked exception，那到底该如何使用异常呢？</p><h3 id="异常应该且仅用于异常情况"><a href="#异常应该且仅用于异常情况" class="headerlink" title="异常应该且仅用于异常情况"></a>异常应该且仅用于异常情况</h3><p>这个含义是说，异常不能代替正常的条件判断。比如说，循环处理数组元素的时候，你应该先检查索引是否有效再进行处理，而不是等着抛出索引异常再结束循环。对于一个引用变量，如果正常情况下它的值也可能为null，那就应该先检查是不是null，不为null的情况下再进行调用。</p><p>另一方面，真正出现异常的时候，应该抛出异常，而不是返回特殊值，比如说，我们看String的substring方法，它返回一个子字符串，它的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> subLen = value.length - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (beginIndex == <span class="number">0</span>) ? <span class="keyword">this</span> : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码会检查beginIndex的有效性，如果无效，会抛出StringIndexOutOfBoundsException。纯技术上一种可能的替代方法是不抛异常而返回特殊值null，但beginIndex无效是异常情况，异常不能假装当正常处理。</p><h3 id="异常处理的目标"><a href="#异常处理的目标" class="headerlink" title="异常处理的目标"></a>异常处理的目标</h3><p>异常大概可以分为三个来源：用户、程序员、第三方。用户是指用户的输入有问题，程序员是指编程错误，第三方泛指其他情况如I/O错误、网络、数据库、第三方服务等。每种异常都应该进行适当的处理。</p><p>处理的目标可以分为报告和恢复。恢复是指通过程序自动解决问题。报告的最终对象可能是用户，即程序使用者，也可能是系统运维人员或程序员。报告的目的也是为了恢复，但这个恢复经常需要人的参与。</p><p>对用户，如果用户输入不对，可能提示用户具体哪里输入不对，如果是编程错误，可能提示用户系统错误、建议联系客服，如果是第三方连接问题，可能提示用户稍后重试。</p><p>对系统运维人员或程序员，他们一般不关心用户输入错误，而关注编程错误或第三方错误，对于这些错误，需要报告尽量完整的细节，包括异常链、异常栈等，以便尽快定位和解决问题。</p><p>对于用户输入或编程错误，一般都是难以通过程序自动解决的，第三方错误则可能可以，甚至很多时候，程序都不应该假定第三方是可靠的，应该有容错机制。比如说，某个第三方服务连接不上(比如发短信)，可能的容错机制是，换另一个提供同样功能的第三方试试，还可能是，间隔一段时间进行重试，在多次失败之后再报告错误。</p><h3 id="异常处理的一般逻辑"><a href="#异常处理的一般逻辑" class="headerlink" title="异常处理的一般逻辑"></a>异常处理的一般逻辑</h3><p>如果自己知道怎么处理异常，就进行处理，如果可以通过程序自动解决，就自动解决，如果异常可以被自己解决，就不需要再向上报告。</p><p>如果自己不能完全解决，就应该向上报告。如果自己有额外信息可以提供，有助于分析和解决问题，就应该提供，可以以原异常为cause重新抛出一个异常。</p><p>总有一层代码需要为异常负责，可能是知道如何处理该异常的代码，可能是面对用户的代码，也可能是主程序。如果异常不能自动解决，对于用户，应该根据异常信息提供用户能理解和对用户有帮助的信息，对运维和程序员，则应该输出详细的异常链和异常栈到日志。</p><p>这个逻辑与在公司中处理问题的逻辑是类似的，每个级别都有自己应该解决的问题，自己能处理的自己处理，不能处理的就应该报告上级，把下级告诉他的，和他自己知道的，一并告诉上级，最终，公司老板必须要为所有问题负责。每个级别既不应该掩盖问题，也不应该逃避责任。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文对异常做了基本介绍，介绍了try/catch和throw关键字及其含义，同时介绍了Throwable以及以它为根的异常类体系，同时还介绍了Java中的异常机制。</p><p>在没有异常机制的情况下，唯一的退出机制是return，判断是否异常的方法就是返回值。方法根据是否异常返回不同的返回值，调用者根据不同返回值进行判断，并进行相应处理。每一层方法都需要对调用的方法的每个不同返回值进行检查和处理，程序的正常逻辑和异常逻辑混杂在一起，代码往往难以阅读理解和维护。另外，因为异常毕竟是少数情况，程序员经常偷懒，假定异常不会发生，而忽略对异常返回值的检查，降低了程序的可靠性。</p><p>在有了异常机制后，程序的正常逻辑与异常逻辑可以相分离，异常情况可以集中进行处理，异常还可以自动向上传递，不再需要每层方法都进行处理，异常也不再可能被自动忽略，从而，处理异常情况的代码可以大大减少，代码的可读性、可靠性、可维护性也都可以得到提高。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用继承需要注意的一些细节</title>
      <link href="2018/06/10/%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%86%E8%8A%82/"/>
      <url>2018/06/10/%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<p> 在Java中，子类继承父类之后，自动拥有父类的属性和行为，并可扩展属性和行为，同时，可重写父类的方法以修改行为。 </p><p>继承的基本概念是比较简单的 ，但继承概念还有一些相关的细节，本文就来探讨下这些细节，具体包括： </p><ul><li>构造方法</li><li>重名与静态绑定</li><li>重载和重写</li><li>父子类型转换</li><li>继承访问权限 (protected)</li><li>可见性重写</li><li>防止继承 (final)</li></ul><p>下面我们逐个来解释。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><h3 id="如果父类没有构造方法"><a href="#如果父类没有构造方法" class="headerlink" title="如果父类没有构造方法"></a>如果父类没有构造方法</h3><p>子类可以通过super(…)调用父类的构造方法，如果子类没有通过super(…)调用，则会自动调动父类的默认构造方法，那如果父类没有默认构造方法呢？如下例所示： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String member;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">(String member)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.member = member;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类只有一个带参数的构造方法，没有默认构造方法。这个时候，<font color="#0000FF">它的任何子类都必须在构造方法中通过super(…)调用Base的带参数构造方法，</font>如下所示，否则，Java会提示编译错误。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(String member)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(member);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法调用重写方法"><a href="#构造方法调用重写方法" class="headerlink" title="构造方法调用重写方法"></a>构造方法调用重写方法</h3><p><font color="#0000FF">如果在父类构造方法中调用了可被重写的方法，则可能会出现意想不到的结果，</font>我们来看个例子： </p><p>这是基类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span></span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法调用了test()。这是子类代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 子类有一个实例变量a，初始赋值为123，重写了test方法，输出a的值。看下使用的代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Child c = <span class="keyword">new</span> Child();</span><br><span class="line">    c.test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出结果是： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>第一次输出为0，第二次为123。第一行为什么是0呢？第一次输出是在new过程中输出的，在new过程中，首先是初始化父类，父类构造方法调用 test()，test被子类重写了，就会调用子类的test()方法，子类方法访问子类实例变量a，而这个时候子类的实例变量的赋值语句和构造方法还没 有执行，所以输出的是其默认值0。</p><p><font color="#0000FF">像这样，在父类构造方法中调用可被子类重写的方法，是一种不好的实践，容易引起混淆，应该只调用private的方法。</font></p><h2 id="重名与静态绑定"><a href="#重名与静态绑定" class="headerlink" title="重名与静态绑定"></a>重名与静态绑定</h2><p>子类可以重写父类非private的方法，当调用的时候，会动态绑定，执行子类的方法。那实例变量、静态方法、和静态变量呢？它们可以重名吗？如果重名，访问的是哪一个呢？ </p><p>重名是可以的，重名后实际上有两个变量或方法。<font color="#0000FF">对于private变量和方法，它们只能在类内被访问，访问的也永远是当前类的，</font>即在子类中，访问的是子类的，在父类中，访问的父类的，它们只是碰巧名字一样而已，没有任何关系。</p><p>但对于public变量和方法，则要看如何访问它，在类内访问的是当前类的，但子类可以通过super.明确指定访问父类的。<font color="#0000FF">在类外，则要看访问变量的静态类型，静态类型是父类，则访问父类的变量和方法，静态类型是子类，则访问的是子类的变量和方法。</font>我们来看个例子：</p><p>这是基类代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s = <span class="string">&quot;static_base&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String m = <span class="string">&quot;base&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;base static: &quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了一个public静态变量s、一个public实例变量m、一个静态方法staticTest。</p><p>这是子类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s = <span class="string">&quot;child_base&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String m = <span class="string">&quot;child&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;child static: &quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类定义了和父类重名的变量和方法。对于一个子类对象，它就有了两份变量和方法，在子类内部访问的时候，访问的是子类的，或者说，子类变量和方法隐藏了父类对应的变量和方法，下面看一下外部访问的代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Child c = <span class="keyword">new</span> Child();</span><br><span class="line">    Base b = c;</span><br><span class="line">    </span><br><span class="line">    System.out.println(b.s);</span><br><span class="line">    System.out.println(b.m);</span><br><span class="line">    b.staticTest();</span><br><span class="line">    </span><br><span class="line">    System.out.println(c.s);</span><br><span class="line">    System.out.println(c.m);</span><br><span class="line">    c.staticTest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码创建了一个子类对象，然后将对象分别赋值给了子类引用变量c和父类引用变量b，然后通过b和c分别引用变量和方法。这里需要说明的是，静态变量和静态方法一般通过类名直接访问，但也可以通过类的对象访问。程序输出为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static_base</span><br><span class="line">base</span><br><span class="line">base <span class="keyword">static</span>: static_base</span><br><span class="line">child_base</span><br><span class="line">child</span><br><span class="line">child <span class="keyword">static</span>: child_base </span><br></pre></td></tr></table></figure><p> 当通过b (静态类型Base) 访问时，访问的是Base的变量和方法，当通过c (静态类型Child)访问时，访问的是Child的变量和方法，这称之为静态绑定，即访问绑定到变量的静态类型，静态绑定在程序编译阶段即可决定，而动态绑定则要等到程序运行时。<font color="#0000FF">实例变量、静态变量、静态方法、private方法，都是静态绑定的。 </font></p><h2 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h2><p>重载是指方法名称相同但参数签名不同（参数个数或类型或顺序不同），重写是指子类重写父类相同参数签名的方法。对一个函数调用而言，可能有多个匹配的方法，有时候选择哪一个并不是那么明显，我们来看个例子： </p><p>这里基类代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;base_int_int&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它定义了方法sum，下面是子类代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;child_long_long&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是调用的代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Child c = <span class="keyword">new</span> Child();</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">    c.sum(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个调用的是哪个sum方法呢？每个sum方法都是兼容的，int类型可以自动转型为long，当只有一个方法的时候，那个方法就会被调用。但现在有多个方法可用，子类的sum方法参数类型虽然不完全匹配但是是兼容的，父类的sum方法参数类型是完全匹配的。程序输出为： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_int_int</span><br></pre></td></tr></table></figure><p>父类类型完全匹配的方法被调用了。如果父类代码改成下面这样呢？ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;base_int_long&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父类方法类型也不完全匹配了。程序输出为： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_int_long</span><br></pre></td></tr></table></figure><p>调用的还是父类的方法。父类和子类的两个方法的类型都不完全匹配，为什么调用父类的呢？因为父类的更匹配一些。现在修改一下子类代码，更改为： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;child_int_long&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出变为了： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">child_int_long</span><br></pre></td></tr></table></figure><p>终于调用了子类的方法。可以看出，<font color="#0000FF">当有多个重名函数的时候，在决定要调用哪个函数的过程中，首先是按照参数类型进行匹配的，换句话说，寻找在所有重载版本中最匹配的，然后才看变量的动态类型，进行动态绑定。</font> </p><h2 id="父子类型转换"><a href="#父子类型转换" class="headerlink" title="父子类型转换"></a>父子类型转换</h2><p>之前我们说过，子类型的对象可以赋值给父类型的引用变量，这叫向上转型，那父类型的变量可以赋值给子类型的变量吗？或者说可以向下转型吗？语法上可以进行强制类型转换，但不一定能转换成功。我们以上面的例子来示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base b = <span class="keyword">new</span> Child();</span><br><span class="line">Child c = (Child)b;</span><br></pre></td></tr></table></figure><p>Child c = (Child)b就是将变量b的类型强制转换为Child并赋值为c，这是没有问题的，因为b的动态类型就是Child，但下面代码是不行的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base b = <span class="keyword">new</span> Base();</span><br><span class="line">Child c = (Child)b;</span><br></pre></td></tr></table></figure><p>语法上Java不会报错，但运行时会抛出错误，错误为类型转换异常。</p><p><font color="#0000FF">一个父类的变量，能不能转换为一个子类的变量，取决于这个父类变量的动态类型（即引用的对象类型）是不是这个子类或这个子类的子类。</font></p><p>给定一个父类的变量，能不能知道它到底是不是某个子类的对象，从而安全的进行类型转换呢？答案是可以，通过instanceof关键字，看下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canCast</span><span class="params">(Base b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b <span class="keyword">instanceof</span> Child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数返回Base类型变量是否可以转换为Child类型，<font color="#0000FF">instanceof前面是变量，后面是类，返回值是boolean值，表示变量引用的对象是不是该类或其子类的对象。</font></p><h2 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h2><p>变量和函数有public/private修饰符，public表示外部可以访问，private表示只能内部使用，还有一种可见性介于中间的修饰符protected，表示虽然不能被外部任意访问，但可被子类访问。另外，在Java中，protected还表示可被同一个包中的其他类访问，不管其他类是不是该类的子类。</p><p>我们来看个例子，这是基类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="keyword">int</span> currentStep;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">step1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">step2</span><span class="params">()</span></span>&#123;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentStep = <span class="number">1</span>;</span><br><span class="line">        step1();</span><br><span class="line">        <span class="keyword">this</span>.currentStep = <span class="number">2</span>;</span><br><span class="line">        step2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>action() 表示对外提供的行为，内部有两个步骤step1()和step2()，使用currentStep变量表示当前进行到了哪个步骤，step1、step2 和currentStep是protected的，子类一般不重写action，而只重写step1和step2，同时，子类可以直接访问 currentStep查看进行到了哪一步。子类的代码是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">step1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;child step &quot;</span></span><br><span class="line">                +<span class="keyword">this</span>.currentStep);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">step2</span><span class="params">()</span></span>&#123;    </span><br><span class="line">        System.out.println(<span class="string">&quot;child step &quot;</span></span><br><span class="line">                +<span class="keyword">this</span>.currentStep);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Child的代码是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Child c = <span class="keyword">new</span> Child();</span><br><span class="line">    c.action();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">child step 1</span><br><span class="line">child step 2</span><br></pre></td></tr></table></figure><p>基类定义了表示对外行为的方法action，并定义了可以被子类重写的两个步骤step1和step2，以及被子类查看的变量currentStep，子类通过重写protected方法step1和step2来修改对外的行为。</p><p>这种思路和设计在设计模式中被称之为模板方法，action方法就是一个模板方法，它定义了实现的模板，而具体实现则由子类提供。模板方法在很多框架中有广泛的应用，这是使用protected的一个常用场景。</p><h2 id="可见性重写"><a href="#可见性重写" class="headerlink" title="可见性重写"></a>可见性重写</h2><p>重写方法时，一般并不会修改方法的可见性。但我们还是要说明一点，重写时，子类方法不能降低父类方法的可见性，不能降低是指，父类如果是public，则子类也必须是public，父类如果是protected，子类可以是protected，也可以是public，即子类可以升级父类方法的可见性但不能降低。如下所示：</p><p>基类代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">protect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="comment">//    以下是不允许的的，会有编译错误</span></span><br><span class="line"><span class="comment">//    private void protect()&#123;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    以下是不允许的，会有编译错误</span></span><br><span class="line"><span class="comment">//    protected void open()&#123;        </span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">protect</span><span class="params">()</span></span>&#123;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要这样规定呢？继承反映的是”is-a”的关系，即子类对象也属于父类，子类必须支持父类所有对外的行为，将可见性降低就会减少子类对外的行为，从而破坏”is-a”的关系，但子类可以增加父类的行为，所以提升可见性是没有问题的。</p><h2 id="防止继承-final"><a href="#防止继承-final" class="headerlink" title="防止继承 (final)"></a>防止继承 (final)</h2><p>有的时候我们不希望父类方法被子类重写，有的时候甚至不希望类被继承，实现这个的方法就是final关键字。 </p><p>一个Java类，默认情况下都是可以被继承的，但加了final关键字之后就不能被继承了，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">   <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个非final的类，其中的public/protected实例方法默认情况下都是可以被重写的，但加了final关键字后就不能被重写了，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不能被重写&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文我们讨论了Java继承概念引入的一些细节，有些细节可能平时遇到的比较少，但我们还是需要对它们有一个比较好的了解，包括构造方法的一些细节，变量和方法的重名，父子类型转换，protected，可见性重写，final等。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数调用基本原理</title>
      <link href="2018/06/06/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>2018/06/06/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>如果需要经常做某一个操作，则类似的代码需要重复写很多遍，比如在一个数组中查找某个数，第一次查找一个数，第二次可能查找另一个数，每查一个数，类似的代码都需要重写一遍，很罗嗦。另外，有一些复杂的操作，可能分为很多个步骤，如果都放在一起，则代码难以理解和维护。 </p><p>计算机程序使用函数这个概念来解决这个问题，即使用函数来减少重复代码和分解复杂操作，本文我们就来谈谈Java中的函数，包括函数的基础和调用原理等相关知识。 </p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p> 函数的基本语法结构，即： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型  函数名字(参数类型 参数名字, ...) &#123;</span><br><span class="line">    操作 ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的主要组成部分有：</p><ul><li>函数名字：名字是不可或缺的，表示函数的功能。</li><li>参数：参数有0个到多个，每个参数有参数的数据类型和参数名字组成。</li><li>操作：函数的具体操作代码。</li><li>返回值：函数可以没有返回值，没有的话返回值类型写成void，有的话在函数代码中必须要使用return语句返回一个值，这个值的类型需要和声明的返回值类型一致。</li><li>修饰符：Java中函数有很多修饰符，分别表示不同的目的，在本节我们假定修饰符为public static，且暂不讨论这些修饰符的目的。</li></ul><p>以上就是定义函数的语法，定义函数就是定义了一段有着明确功能的子程序，但定义函数本身不会执行任何代码，函数要被执行，需要被调用。</p><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>Java中，任何函数都需要放在一个类中 ，Java中函数一般叫做方法，我们不特别区分函数和方法，可能会交替使用。一个类里面可以定义多个函数，类里面可以定义一个叫做main的函数，形式如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数有特殊的含义，表示程序的入口，String[] args表示从控制台接收到的参数。Java中运行一个程序的时候，需要指定一个定义了main函数的类，Java会寻找main函数，并从main函数开始执行。</p><p>刚开始学编程的人可能会误以为程序从代码的第一行开始执行，这是错误的，不管main函数定义在哪里，Java函数都会先找到它，然后从它的第一行开始执行。main函数中除了可以定义变量，操作数据 ，还可以调用其它函数 。</p><p>对于需要重复执行的代码，可以定义函数，然后在需要的地方调用，这样可以减少重复代码。对于复杂的操作，可以将操作分为多个函数，会使得代码更加易读。</p><p>程序执行基本上只有顺序执行、条件执行和循环执行，但更完整的描述应该包括函数的调用过程。程序从main函数开始执行，碰到函数调用的时候，会跳转进函数内部，函数调用了其他函数，会接着进入其他函数，函数返回后会继续执行调用后面的语句，返回到main函数并且main函数没有要执行的语句后程序结束。 </p><div class="tip"> 在Java中，函数在程序代码中的位置和实际执行的顺序是没有关系的。</div>函数的定义和基本调用应该是比较容易理解的，但有很多细节可能令初学者困惑，包括参数传递、参数类型，返回、函数命名、调用过程等，我们逐个讨论下。 <h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><p>形式参数：是在定义函数名和函数体的时候使用的参数，目的是用来接收调用该函数时传入的参数，简称“形参”。</p><p>实际参数：在主调函数中调用一个函数时，函数名后面括号中的参数称为“实际参数”，简称“实参”。  </p><p>举个栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamTest</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParamTest pt = <span class="keyword">new</span> ParamTest();</span><br><span class="line">        <span class="comment">// 实际参数为“张三”</span></span><br><span class="line">        pt.sout(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sout</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 形式参数为 name</span></span><br><span class="line">        System.out.print(name);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h3><p>值传递：指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p><p>引用传递：指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p><p>两者的区别：</p><table><thead><tr><th></th><th align="center">值传递</th><th>引用传递</th></tr></thead><tbody><tr><td>根本区别</td><td align="center">会创建副本</td><td>不会创建副本</td></tr><tr><td>所以</td><td align="center">函数中无法改变原始对象</td><td>函数中可以改变原始对象</td></tr></tbody></table><p>那Java中使用的究竟是值传递还是引用传递呢？我们将在后面给出答案。</p><h2 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h2><p>函数主要的参数类别又可分为基本类型参数，引用类型参数，数组参数和可变长度参数，以下我们逐个进行介绍。</p><h3 id="基本类型参数"><a href="#基本类型参数" class="headerlink" title="基本类型参数"></a>基本类型参数</h3><p>基本类型参数很好理解，就是简单的值传递，直接将值复制到函数内部进行使用，基本类型不会对调用者中的变量造成任何影响 。</p><h3 id="引用类型参数"><a href="#引用类型参数" class="headerlink" title="引用类型参数"></a>引用类型参数</h3><p>那引用类型参数是不是使用的引用传递呢？我们来看下面的栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">user.setAge(<span class="number">18</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;call方法调用前，user=&quot;</span> + user.toString());</span><br><span class="line">call(user);</span><br><span class="line">System.out.println(<span class="string">&quot;call方法调用后，user=&quot;</span> + user.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">user.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;call方法中,user = &quot;</span> + user.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line"><span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，定义了一个User类，在main方法中，new了一个新的User对象user，然后给user对象的成员变量赋值，call方法中，修改了传入的user对象的属性。</p><p>运行main方法，结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call方法调用前，user= User&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>&#125;</span><br><span class="line">call方法中,user = User&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">18</span>&#125;</span><br><span class="line">call方法调用后，user= User&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><p>引用类型参数与基本类型参数略有不同，但使用的仍然是值传递，只不过对于引用类型参数，值的内容是对象的引用。 就是在调用函数时只将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到调用者中的变量</p><div class="tip">在Java中，方法参数的传递不管是基本数据类型还是引用类型都是值传递 </div>### 数组参数<p>数组与引用参数类似，在函数内修改数组中的元素会修改调用者中的数组内容。我们看个例子： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        arr[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;;</span><br><span class="line">    reset(arr);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在reset函数内给参数数组元素赋值，在main函数中数组arr的值也会变。</p><p>这个其实也容易理解， 一个数组变量有两块空间，一块用于存储数组内容本身，另一块用于存储内容的位置，给数组变量赋值不会影响原有的数组内容本身，而只会让数组变量指向一个不同的数组内容空间，这一点与引用参数类似的。 </p><p>在上例中，函数参数中的数组变量arr和main函数中的数组变量arr存储的都是相同的位置，而数组内容本身只有一份数据，所以，在reset中修改数组元素内容和在main中修改是完全一样的。 </p><h3 id="可变长度参数"><a href="#可变长度参数" class="headerlink" title="可变长度参数"></a>可变长度参数</h3><p>上面介绍的函数，参数个数都是固定的，但有的时候，可能希望参数个数不是固定的，比如说求若干个数的最大值，可能是两个，也可能是多个，Java支持可变长度的参数，如下例所示： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> ... a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = min;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(max&lt;a[i])&#123;</span><br><span class="line">            max = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(max(<span class="number">0</span>));</span><br><span class="line">    System.out.println(max(<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">    System.out.println(max(<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">    System.out.println(max(<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个max函数接受一个最小值，以及可变长度的若干参数，返回其中的最大值。可变长度参数的语法是在数据类型后面加三个点…，在函数内，可变长度参数可以看做就是数组，可变长度参数必须是参数列表中的最后一个参数，一个函数也只能有一个可变长度的参数。</p><p>可变长度参数实际上会转换为数组参数，也就是说，函数声明max(int min, int… a)实际上会转换为 max(int min, int[] a)，在main函数调用 max(0,2,4,5)的时候，实际上会转换为调用 max(0, new int[]{2,4,5})，使用可变长度参数主要是简化了代码书写。</p><h2 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h2><h3 id="return的含义"><a href="#return的含义" class="headerlink" title="return的含义"></a>return的含义</h3><p>对初学者，我们强调下return的含义。 函数返回值类型为void且没有return的情况下，会执行到函数结尾自动返回。return用于结束函数执行，返回调用方。 </p><p>return可以用于函数内的任意地方，可以在函数结尾，也可以在中间，可以在if语句内，可以在for循环内，用于提前结束函数执行，返回调用方。</p><p>函数返回值类型为void也可以使用return，即return;，不用带值，含义是返回调用方，只是没有返回值而已。</p><h3 id="返回值的个数"><a href="#返回值的个数" class="headerlink" title="返回值的个数"></a>返回值的个数</h3><p>函数的返回值最多只能有一个，那如果实际情况需要多个返回值呢？比如说，计算一个整数数组中的最大的前三个数，需要返回三个结果。这个可以用数组作为返回值，在函数内创建一个包含三个元素的数组，然后将前三个结果赋给对应的数组元素。</p><p>如果实际情况需要的返回值是一种复合结果呢？比如说，查找一个字符数组中，所有重复出现的字符以及重复出现的次数。这个可以用对象作为返回值。</p><h2 id="函数命名"><a href="#函数命名" class="headerlink" title="函数命名"></a>函数命名</h2><p>每个函数都有一个名字，这个名字表示这个函数的意义，名字可以重复吗？在不同的类里，答案是肯定的，在同一个类里，要看情况。</p><p>同一个类里，函数可以重名，但是参数不能一样，一样是指参数个数相同，每个位置的参数类型也一样，但参数的名字不算，返回值类型也不算。换句话说，函数的唯一性标示是：类名<em>函数名_参数1类型_参数2类型</em>…参数n类型。</p><p>同一个类中函数名字相同但参数不同的现象，一般称为函数重载。为什么需要函数重载呢？一般是因为函数想表达的意义是一样的，但参数个数或类型不一样。比如说，求两个数的最大值，在Java的Math库中就定义了四个函数，如下所示：</p><p><img src="/2018/06/06/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86_p1.png" alt="img"></p><h2 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h2><h3 id="匹配过程"><a href="#匹配过程" class="headerlink" title="匹配过程"></a>匹配过程</h3><p>在之前介绍函数调用的时候，我们没有特别说明参数的类型。这里说明一下，参数传递实际上是给参数赋值，调用者传递的数据需要与函数声明的参数类型是匹配的，但不要求完全一样。什么意思呢？Java编译器会自动进行类型转换，并寻找最匹配的函数。比如说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char a &#x3D; &#39;a&#39;;</span><br><span class="line">char b &#x3D; &#39;b&#39;;</span><br><span class="line">System.out.println(Math.max(a,b));</span><br></pre></td></tr></table></figure><p>参数是字符类型的，但Math并没有定义针对字符类型的max函数，我们之前说明，char其实是一个整数，Java会自动将char转换为int，然后调用Math.max(int a, int b)，屏幕会输出整数结果98。</p><p> 如果Math中没有定义针对int类型的max函数呢？调用也会成功，会调用long类型的max函数，如果long也没有呢？会调用float型的max函数，如果float也没有，会调用double型的。Java编译器会自动寻找最匹配的。<br>在只有一个函数的情况下（即没有重载），只要可以进行类型转换，就会调用该函数，在有函数重载的情况下，会调用最匹配的函数。 </p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>函数大部分情况下都是被别的函数调用，但其实函数也可以调用它自己，调用自己的函数就叫递归函数。</p><p>为什么需要自己调用自己呢？我们来看一个例子，求一个数的阶乘，数学中一个数n的阶乘，表示为n!，它的值定义是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0!&#x3D;1</span><br><span class="line">n!&#x3D;(n-1)!×n</span><br></pre></td></tr></table></figure><p>0的阶乘是1，n的阶乘的值是n-1的阶乘的值乘以n，这个定义是一个递归的定义，为求n的值，需先求n-1的值，直到0，然后依次往回退。用递归表达的计算用递归函数容易实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n*factorial(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看上去应该是比较容易理解的，和数学定义类似。</p><p>递归函数形式上往往比较简单，但递归其实是有开销的，而且使用不当，可以会出现意外的结果，比如说这个调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(factorial(10000));</span><br></pre></td></tr></table></figure><p>系统并不会给出任何结果，而会抛出异常，异常我们在后续章节介绍，此处理解为系统错误就可以了，异常类型为：java.lang.StackOverflowError，这是什么意思呢？这表示栈溢出错误，要理解这个错误，我们需要理解函数调用的实现原理（下节介绍）。</p><p>那如果递归不行怎么办呢？递归函数经常可以转换为非递归的形式，通过一些数据结构（后续章节介绍）以及循环来实现。比如，求阶乘的例子，其非递归形式的定义是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n!&#x3D;1×2×3×…×n</span><br></pre></td></tr></table></figure><p>这个可以用循环来实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        result*=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数调用实现机制"><a href="#函数调用实现机制" class="headerlink" title="函数调用实现机制"></a>函数调用实现机制</h2><p>上面我们提到了一个系统异常java.lang.StackOverflowError，栈溢出错误，要理解这个错误，我们需要理解函数调用的实现机制。 </p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>程序从main函数开始顺序执行，函数调用可以看做是一个无条件跳转，跳转到对应函数的指令处开始执行，碰到return语句或者函数结尾的时候，再执行一次无条件跳转，跳转回调用方，执行调用函数后的下一条指令。</p><p>但这里面有几个问题：</p><ul><li>参数如何传递？</li><li>函数如何知道返回到什么地方？在if/else, for中，跳转的地址都是确定的，但函数自己并不知道会被谁调用，而且可能会被很多地方调用，它并不能提前知道执行结束后返回哪里。</li><li>函数结果如何传给调用方？</li></ul><p><font color="#0000FF">解决思路是使用内存来存放这些数据，函数调用方和函数自己就如何存放和使用这些数据达成一个一致的协议或约定。这个约定在各种计算机系统中都是类似的，存放这些数据的内存有一个相同的名字，叫栈</font>。</p><p>栈是一块内存，但它的使用有特别的约定，一般是先进后出，类似于一个桶，往栈里放数据，我们称为入栈，最下面的我们称为栈底，最上面的我们称为栈顶，从栈顶拿出数据，通常称为出栈。栈一般是从高位地址向低位地址扩展，换句话说，栈底的内存地址是最高的，栈顶的是最小的。</p><p><font color="#0000FF">计算机系统主要使用栈来存放函数调用过程中需要的数据，包括参数、返回地址，函数内定义的局部变量也放在栈中。</font>计算机系统就如何在栈中存放这些数据，调用者和函数如何协作做了约定。返回值不太一样，它可能放在栈中，但它使用的栈和局部变量不完全一样，有的系统使用CPU内的一个存储器存储返回值，我们可以简单认为存在一个专门的返回值存储器。 main函数的相关数据放在栈的最下面，每调用一次函数，都会将相关函数的数据入栈，调用结束会出栈。</p><p>以上描述可能有点抽象，我们通过一个例子来说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sum</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         <span class="keyword">int</span> c = a + b;</span><br><span class="line"> <span class="number">5</span>         <span class="keyword">return</span> c;</span><br><span class="line"> <span class="number">6</span>     &#125;</span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">9</span>         <span class="keyword">int</span> d = Sum.sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="number">10</span>         System.out.println(d);</span><br><span class="line"><span class="number">11</span>     &#125;</span><br><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">13</span> &#125;</span><br></pre></td></tr></table></figure><p>这是一个简单的例子，main函数调用了sum函数，计算1和2的和，然后输出计算结果，从概念上，这是容易理解的，让我们从栈的角度来讨论下。</p><p>当程序在main函数调用Sum.sum之前，栈的情况大概是这样的：</p><p><img src="/2018/06/06/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86_p2.png" alt="img"></p><p>主要存放了两个变量args和d。在程序执行到Sum.sum的函数内部，准备返回之前，即第5行，栈的情况大概是这样的：</p><p><img src="/2018/06/06/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86_p3.png" alt="img"></p><p>我们解释下，在main函数调用Sum.sum时，首先将参数1和2入栈，然后将返回地址（也就是调用函数结束后要执行的指令地址）入栈，接着跳转到sum 函数，在sum函数内部，需要为局部变量c分配一个空间，而参数变量a和b则直接对应于入栈的数据1和2，在返回之前，返回值保存到了专门的返回值存储器 中。</p><p>在调用return后，程序会跳转到栈中保存的返回地址，即main的下一条指令地址，而sum函数相关的数据会出栈，从而又变回下面这样：</p><p><img src="/2018/06/06/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86_p4.png" alt="img"></p><p>main的下一条指令是根据函数返回值给变量d赋值，返回值从专门的返回值存储器中获得。</p><p>函数执行的基本原理，简单来说就是这样。但有一些需要介绍的点，我们讨论一下。</p><h3 id="变量生命周期"><a href="#变量生命周期" class="headerlink" title="变量生命周期"></a>变量生命周期</h3><p>定义一个变量就会分配一块内存，但我们并没有具体谈什么时候分配内存，具体分配在哪里，什么时候释放内存。</p><p>从以上关于栈的描述我们可以看出，<font color="#0000FF">函数中的参数和函数内定义的变量，都分配在栈中，这些变量只有在函数被调用的时候才分配，而且在调用结束后就被释放了。</font>但这个说法主要针对基本数据类型，接下来我们谈数组和对象。</p><h3 id="数组和对象"><a href="#数组和对象" class="headerlink" title="数组和对象"></a>数组和对象</h3><p>对于数组和对象类型，我们介绍过，它们都有两块内存，一块存放实际的内容，一块存放实际内容的地址，实际的内容空间一般不是分配在栈上的，而是分配在堆（也是内存的一部分，后续文章介绍）中，但存放地址的空间是分配在栈上的。</p><p>我们来看个例子，下面是代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayMax</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = min;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a : arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&gt;max)&#123;</span><br><span class="line">                max = a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> ret = max(<span class="number">0</span>, arr);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序也很简单，main函数新建了一个数组，然后调用函数max计算0和数组中元素的最大值，在程序执行到max函数的return语句之前的时候，内存中栈和堆的情况大概是这样的：</p><p><img src="/2018/06/06/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86_p5.png" alt="img"></p><p>对于数组arr，在栈中存放的是实际内容的地址0x1000，存放地址的栈空间会随着入栈分配，出栈释放，但存放实际内容的堆空间不受影响。</p><p>但说堆空间完全不受影响是不正确的，在这个例子中，当main函数执行结束，栈空间没有变量指向它的时候，Java系统会自动进行垃圾回收，从而释放这块空间。</p><h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><p> 我们再通过栈的角度来理解一下递归函数的调用过程，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n*factorial(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = factorial(<span class="number">4</span>);</span><br><span class="line">    System.out.println(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在factorial第一次被调用的时候，n是4，在执行到 n<em>factorial(n-1)，即4</em>factorial(3)之前的时候，栈的情况大概是：</p><p><img src="/2018/06/06/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86_p6.png" alt="img"><br>注意返回值存储器是没有值的，在调用factorial(3)后，栈的情况变为了：</p><p><img src="/2018/06/06/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86_p7.png" alt="img"></p><p>栈的深度增加了，返回值存储器依然为空，就这样，每递归调用一次，栈的深度就增加一层，每次调用都会分配对应的参数和局部变量，也都会保存调用的返回地址，在调用到n等于0的时候，栈的情况是：</p><p>这个时候，终于有返回值了，我们将factorial简写为f。f(0)的返回值为1，f(0)返回到f(1)，f(1)执行1<em>f(0)，结果也是1，然 后返回到f(2)，f(2)执行2</em>f(1)，结果是2，然后接着返回到f(3)，f(3)执行3<em>f(2)，结果是6，然后返回到f(4)，执行 4</em>f(3)，结果是24。</p><p>以上就是<font color="#0000FF">递归函数的执行过程，函数代码虽然只有一份，但在执行的过程中，每调用一次，就会有一次入栈，生成一份不同的参数、局部变量和返回地址。</font></p><h3 id="函数调用成本"><a href="#函数调用成本" class="headerlink" title="函数调用成本"></a>函数调用成本</h3><p>从函数调用的过程我们可以看出，调用是有成本的，每一次调用都需要分配额外的栈空间用于存储参数、局部变量以及返回地址，需要进行额外的入栈和出栈操作。</p><p>在递归调用的情况下，如果递归的次数比较多，这个成本是比较可观的，所以，如果程序可以比较容易的改为别的方式，应该考虑别的方式。</p><p>另外，栈的空间不是无限的，一般正常调用都是没有问题的，但像上节介绍的例子，栈空间过深，系统就会抛出错误，java.lang.StackOverflowError，即栈溢出。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>函数是计算机程序的一种重要结构，通过函数来减少重复代码，分解复杂操作是计算机程序的一种重要思维方式。 </p><p>本文我们介绍了函数的基础概念，还有关于参数传递、返回值、重载、递归方面和调用实现机制上的一些细节 。 函数调用主要是通过栈来存储相关数据的，系统就函数调用者和函数如何使用栈做了约定，返回值我们简化认为是通过一个专门的返回值存储器存储的，我们主要从概念上介绍了其基本原理。 </p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剖析String</title>
      <link href="2018/06/05/%E5%89%96%E6%9E%90String/"/>
      <url>2018/06/05/%E5%89%96%E6%9E%90String/</url>
      
        <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>Java中表示字符串的类是String，首先我们来介绍下Java中字符串的基本用法。</p><p>可以通过常量定义String变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">&quot;hello 世界！&quot;</span>;</span><br></pre></td></tr></table></figure><p>也可以通过new创建String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="keyword">new</span> String(<span class="string">&quot;hello 世界！&quot;</span>);</span><br></pre></td></tr></table></figure><p>String可以直接使用+和+=运算符，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">name += <span class="string">&quot;世界！&quot;</span>;</span><br><span class="line">String test = <span class="string">&quot;你好！&quot;</span>;</span><br><span class="line">System.out.println(name + test);</span><br></pre></td></tr></table></figure><p>输出为：hello 世界！你好！</p><p>String类中还包括很多方法，以方便操作字符串，以下是一些常用的方法。</p><p>比如判断字符串是否为空，但这不包含为null的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>判断一个字符串为null或为空字符串，我们一般这样自定义实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBlank</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str == <span class="keyword">null</span> || str.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取字符串长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>取子字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span></span></span><br></pre></td></tr></table></figure><p>在字符串中查找字符或子字符串，返回第一个找到的索引位置，没找到返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span></span></span><br></pre></td></tr></table></figure><p>从后面查找字符或子字符串，返回从后面数的第一个索引位置，没找到返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(<span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str)</span></span></span><br></pre></td></tr></table></figure><p>判断字符串中是否包含指定的字符序列。CharSequence是一个接口，表示一个字符序列，String也实现了CharSequence</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(CharSequence s)</span></span></span><br></pre></td></tr></table></figure><p>判断字符串是否以给定子字符串开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span></span></span><br></pre></td></tr></table></figure><p>判断字符串是否以给定子字符串结尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String suffix)</span></span></span><br></pre></td></tr></table></figure><p>与其他字符串比较，看内容是否相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span></span></span><br></pre></td></tr></table></figure><p>忽略大小写，与其他字符串进行比较，看内容是否相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String anotherString)</span></span></span><br></pre></td></tr></table></figure><p>String也实现了Comparable接口，可以比较字符串大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span></span></span><br></pre></td></tr></table></figure><p>还可以忽略大小写，进行大小比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareToIgnoreCase</span><span class="params">(String str)</span></span></span><br></pre></td></tr></table></figure><p>所有字符转换为大写字符，返回新字符串，原字符串不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpperCase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpperCase</span><span class="params">(Locale locale)</span></span></span><br></pre></td></tr></table></figure><p>所有字符转换为小写字符，返回新字符串，原字符串不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLowerCase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLowerCase</span><span class="params">(Locale locale)</span></span></span><br></pre></td></tr></table></figure><div class="tip">当你的程序在涉及国际化的情况下请务必指定locale，如：Locale.ENGLISH，不然在不同语言的机器上转换结果可能会不一致。</div><p>字符串连接，返回当前字符串和参数字符串合并后的字符串，原字符串不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span></span></span><br></pre></td></tr></table></figure><p>字符串替换，替换单个字符，返回新字符串，原字符串不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span></span></span><br></pre></td></tr></table></figure><p>字符串替换，替换字符序列，返回新字符串，原字符串不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(CharSequence target, CharSequence replacement)</span></span></span><br></pre></td></tr></table></figure><p>删掉开头和结尾的空格，返回新字符串，原字符串不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">trim</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>分隔字符串，返回分隔后的子字符串数组，原字符串不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex)</span><br></pre></td></tr></table></figure><p>注意这里参数是一个正则表达式，比如要按“.”号分割的话（“.”在正则表达式中有特殊含义），需按如下方式写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;aa.bbb.cc&quot;</span>;</span><br><span class="line">String[] arr = str.split(<span class="string">&quot;[.]&quot;</span>);</span><br><span class="line">System.out.println(arr.length);</span><br></pre></td></tr></table></figure><h2 id="剖析String内部实现"><a href="#剖析String内部实现" class="headerlink" title="剖析String内部实现"></a>剖析String内部实现</h2><p>从调用者的角度理解了String的基本用法，下面我们进一步来理解String的内部。</p><p><strong>封装字符数组</strong></p><p>String类内部封装了一个字符数组表示字符串，实例变量定义为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br></pre></td></tr></table></figure><p>String有两个构造方法，可以根据char数组创建String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span></span></span><br></pre></td></tr></table></figure><div class="tip">需要说明的是，String会根据参数新创建一个数组，并拷贝内容，而不会直接用参数中的字符数组。</div><p>String中的大部分方法，内部也都是操作的这个字符数组。比如说：</p><ul><li>length()方法返回的就是这个数组的长度</li><li>substring()方法就是根据参数，调用构造方法String(char value[], int offset, int count)新建了一个字符串</li><li>indexOf查找字符或子字符串时就是在这个数组中进行查找</li></ul><p>String中还有一些方法，与这个char数组有关：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br></pre></td></tr></table></figure><p>返回字符串对应的char数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[] toCharArray()</span><br></pre></td></tr></table></figure><div class="tip">注意，这里返回的是一个拷贝后的数组，而不是原数组。</div><p>将char数组中指定范围的字符拷贝入目标数组指定位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getChars</span><span class="params">(<span class="keyword">int</span> srcBegin, <span class="keyword">int</span> srcEnd, <span class="keyword">char</span> dst[], <span class="keyword">int</span> dstBegin)</span></span></span><br></pre></td></tr></table></figure><p><strong>编码转换</strong></p><p>String内部是按UTF-16BE处理字符的，对BMP字符，使用一个char，两个字节，对于增补字符，使用两个char，四个字节。我们之前介绍过各种编码，不同编码可能用于不同的字符集，使用不同的字节数目，和不同的二进制表示。如何处理这些不同的编码呢？这些编码与Java内部表示之间如何相互转换呢？</p><p>Java使用Charset这个类表示各种编码，它有两个常用静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Charset <span class="title">defaultCharset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Charset <span class="title">forName</span><span class="params">(String charsetName)</span></span></span><br></pre></td></tr></table></figure><p>第一个方法返回系统的默认编码，比如，在我的电脑上，执行如下语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Charset.defaultCharset().name()); <span class="comment">// 输出为UTF-8</span></span><br></pre></td></tr></table></figure><p>第二方法返回给定编码名称的Charset对象，与我们在第六节介绍的编码相对应，其charset名称可以是:US-ASCII, ISO-8859-1, windows-1252, GB2312, GBK, GB18030, Big5, UTF-8，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Charset charset = Charset.forName(<span class="string">&quot;GB18030&quot;</span>);</span><br></pre></td></tr></table></figure><p>String类提供了如下方法，返回字符串按给定编码的字节表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(String charsetName)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(Charset charset)</span><br></pre></td></tr></table></figure><p>第一个方法没有编码参数，使用系统默认编码，第二方法参数为编码名称，第三个为Charset。</p><p>String类有如下构造方法，可以根据字节和编码创建字符串，也就是说，根据给定编码的字节表示，创建Java的内部表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[])</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, String charsetName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, Charset charset)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], String charsetName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], Charset charset)</span></span></span><br></pre></td></tr></table></figure><p>除了通过String中的方法进行编码转换，Charset类中也有一些方法进行编码/解码，这里就不介绍了。重要的是认识到，Java的内部表示与各种编码是不同的，但可以相互转换。</p><p><strong>不可变性</strong></p><p>与包装类类似，String类也是不可变类，即对象一旦创建，就没有办法修改了。String类也声明为了final，不能被继承，内部char数组value也是final的，初始化后就不能再变了。</p><p>String类中提供了很多看似修改的方法，其实是通过创建新的String对象来实现的，原来的String对象不会被修改。比如说，我们来看concat()方法的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> otherLen = str.length();</span><br><span class="line">    <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = value.length;</span><br><span class="line">    <span class="keyword">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">    str.getChars(buf, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Arrays.copyOf方法创建了一块新的字符数组，拷贝原内容，然后通过new创建了一个新的String。</p><p>与包装类类似，定义为不可变类，程序可以更为简单、安全、容易理解。但如果频繁修改字符串，而每次修改都新建一个字符串，性能太低，这时，应该考虑Java中的另两个类StringBuilder和StringBuffer。</p><p><strong>常量字符串</strong></p><p>Java中的字符串常量是非常特殊的，除了可以直接赋值给String变量外，它自己就像一个String类型的对象一样，可以直接调用String的各种方法。我们来看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;hello world&quot;</span>.length());</span><br><span class="line">System.out.println(<span class="string">&quot;老hello&quot;</span>.contains(<span class="string">&quot;world&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>.indexOf(<span class="string">&quot;el&quot;</span>));</span><br></pre></td></tr></table></figure><p>实际上，这些常量就是String类型的对象，在内存中，它们被放在一个共享的地方，这个地方称为字符串常量池，它保存所有的常量字符串，每个常量只会保存一份，被所有使用者共享。当通过常量的形式使用一个字符串的时候，使用的就是常量池中的那个对应的String类型的对象。</p><p>比如说，我们来看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String nihao = <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;你&#x27;</span>,<span class="string">&#x27;好&#x27;</span>,<span class="string">&#x27;世&#x27;</span>,<span class="string">&#x27;界&#x27;</span>&#125;);</span><br><span class="line">String name1 = nihao;</span><br><span class="line">String name2 = nihao;</span><br><span class="line">System.out.println(name1==name2);</span><br></pre></td></tr></table></figure><p>实际上只有一个String对象，三个变量都指向这个对象，name1==name2也就不言而喻了。</p><p>需要注意的是，如果不是通过常量直接赋值，而是通过new创建的，==就不会返回true了，看下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String name1 = <span class="keyword">new</span> String(<span class="string">&quot;你好世界&quot;</span>);</span><br><span class="line">String name2 = <span class="keyword">new</span> String(<span class="string">&quot;你好世界&quot;</span>);</span><br><span class="line">System.out.println(name1==name2);</span><br></pre></td></tr></table></figure><p>输出为false，为什么呢？上面代码类似于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String name1 = <span class="keyword">new</span> String(nihao);</span><br><span class="line">String name2 = <span class="keyword">new</span> String(nihao);</span><br><span class="line">System.out.println(name1==name2);</span><br></pre></td></tr></table></figure><p>String类中以String为参数的构造方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = original.value;</span><br><span class="line">    <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hash是String类中另一个实例变量，表示缓存的hashCode值，我们待会介绍。<br>可以看出, name1和name2指向两个不同的String对象，只是这两个对象内部的value值指向相同的char数组。</p><p>所以，name1==name2是不成立的，但name1.equals(name2)是true。</p><p><strong>hashCode</strong></p><p>我们刚刚提到hash这个实例变量，它的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></figure><p>它缓存了hashCode()方法的值，也就是说，第一次调用hashCode()的时候，会把结果保存在hash这个变量中，以后再调用就直接返回保存的值。</p><p>我们来看下String类的hashCode方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hash;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> val[] = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = <span class="number">31</span> * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果缓存的hash不为0，就直接返回了，否则根据字符数组中的内容计算hash，计算方法是：<br>s[0]*31^(n-1) + s[1]*31^(n-2) + … + s[n-1]</p><p>s表示字符串，s[0]表示第一个字符，n表示字符串长度，s[0]*31^(n-1)表示31的n-1次方再乘以第一个字符的值。</p><p>为什么要用这个计算方法呢？这个式子中，hash值与每个字符的值有关，每个位置乘以不同的值，hash值与每个字符的位置也有关。使用31大概是因为两个原因，一方面可以产生更分散的散列，即不同字符串hash值也一般不同，另一方面计算效率比较高，31<em>h与32</em>h-h即 (h&lt;&lt;5)-h等价，可以用更高效率的移位和减法操作代替乘法操作。</p><p>在Java中，普遍采用以上思路来实现hashCode。</p><p><strong>正则表达式</strong></p><p>String类中，有一些方法接受的不是普通的字符串参数，而是正则表达式，什么是正则表达式呢？它可以理解为一个字符串，但表达的是一个规则，一般用于文本的匹配、查找、替换等，正则表达式有着丰富和强大的功能，是一个比较庞大的话题，我们可能会在后续章节单独介绍。</p><p>Java中有专门的类如Pattern和Matcher用于正则表达式，但对于简单的情况，String类提供了更为简洁的操作，String中接受正则表达式的方法有：</p><p>分隔字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex)</span><br></pre></td></tr></table></figure><p>检查是否匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span></span></span><br></pre></td></tr></table></figure><p>字符串替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceFirst</span><span class="params">(String regex, String replacement)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceAll</span><span class="params">(String regex, String replacement)</span></span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节，我们介绍了String类，介绍了其基本用法，内部实现，编码转换，分析了其不可变性，常量字符串，以及hashCode的实现。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Char的本质是什么</title>
      <link href="2018/05/11/Char%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>2018/05/11/Char%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>本节讨论在Java中进行字符处理的基础 - char，Java中还有Character, String, StringBuffer, StringBuilder等类进行文本处理，他们的基础都是char，我们在后续文章中介绍这些类。</p><h2 id="char的本质"><a href="#char的本质" class="headerlink" title="char的本质"></a>char的本质</h2><p>char看上去是很简单的，正如我们之前所说，char用于表示一个字符，这个字符可以是中文字符，也可以是英文字符。赋值时把常量字符用单引号括起来，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> z = <span class="string">&#x27;中&#x27;</span>;</span><br></pre></td></tr></table></figure><p>但为什么字符类型也可以进行算术运算和比较？char的本质到底是什么呢？</p><p>在 Java内部进行字符处理时，采用的都是Unicode，具体编码格式是UTF-16BE。UTF-16使用两个或四个字节表示一个字符，Unicode编号范围在65536以内的占两个字节，超出范围的占四个字节，BE (Big Endian)就是先输出高位字节，再输出低位字节，这与整数的内存表示是一致的。</p><p><font color="#0000FF">因此，char本质上是一个固定占用两个字节的无符号正整数，这个正整数对应于Unicode编号，用于表示那个Unicode编号对应的字符。</font></p><p>由于固定占用两个字节，char只能表示Unicode编号在65536以内的字符，而不能表示超出范围的字符。</p><p>那超出范围的字符怎么表示呢？使用两个char。类String有一些相关的方法，我们后续会介绍。</p><p>在这个认识的基础上，我们再来看下char的一些行为，就比较容易理解了。</p><h3 id="char的赋值"><a href="#char的赋值" class="headerlink" title="char的赋值"></a>char的赋值</h3><p>char有多种赋值方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;A&#x27;</span>       <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;马&#x27;</span>      <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="number">39532</span>     <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="number">0x9a6c</span>    <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;\u9a6c&#x27;</span>  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>第1种赋值方式是最常见的，将一个能用Ascii码表示的字符赋给一个字符变量。</p><p>第 2种也很常见，但这里是个中文字符，需要注意的是，直接写字符常量的时候应该注意文件的编码，比如说，GBK编码的代码文件按UTF-8打开，字符会变成乱码，赋值的时候是按当前的编码解读方式，将这个字符形式对应的Unicode编号值赋给变量，’马’对应的Unicode编号是39532，所以第2种赋值和第3种是一样的。</p><p>第3种是直接将十进制的常量赋给字符。</p><p>第4种是将16进制常量赋给字符。</p><p>第5种是按Unicode字符形式。</p><p>以上，2，3，4，5都是一样的，本质都是将Unicode编号39532赋给了字符。</p><h3 id="char的运算"><a href="#char的运算" class="headerlink" title="char的运算"></a>char的运算</h3><p>由于char本质上是一个整数，所以可以进行整数可以进行的一些运算，在进行运算时会被看做int，但由于char占两个字节，运算结果不能直接赋值给char类型，需要进行强制类型转换，这和byte, short参与整数运算是类似的。</p><p>char类型的比较就是其Unicode编号的比较。</p><p>char 的加减运算就是按其Unicode编号进行运算，一般对字符做加减运算没什么意义，但Ascii码字符是有意义的。比如大小写转换，大写A-Z的编号是 65-90，小写a-z的编号是97-122，正好相差32，所以大写转小写只需加32，而小写转大写只需减32。加减运算的另一个应用是加密和解密，将 字符进行某种可逆的数学运算可以做加解密。</p><p>char的位运算可以看做就是对应整数的位运算，只是它是无符号数，也就是说，有符号右移&gt;&gt;和无符号右移&gt;&gt;&gt;的结果是一样的。</p><h3 id="char的二进制"><a href="#char的二进制" class="headerlink" title="char的二进制"></a>char的二进制</h3><p>既然char本质上是整数，查看char的二进制表示，同样可以用Integer的方法，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;马&#x27;</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(c));</span><br></pre></td></tr></table></figure><p>输出为 1001101001101100</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节介绍了char的本质，它固定占用两个字节，实际上是一个整数，表示字符的Unicode编号，不在65536编号内的字符一个char表示不了，需要用两个char。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码与乱码</title>
      <link href="2018/05/06/%E7%BC%96%E7%A0%81%E4%B8%8E%E4%B9%B1%E7%A0%81/"/>
      <url>2018/05/06/%E7%BC%96%E7%A0%81%E4%B8%8E%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>世界上虽然有各种各样的字符，但计算机发明之初没有考虑那么多，基本上只考虑了美国的需求，美国大概只需要128个字符，美国就规定了这128个字符的二进制表示方法。<br>这个方法是一个标准，称为ASCII编码，全称是American Standard Code for Information Interchange，美国信息互换标准代码。</p><p>128个字符用7个位刚好可以表示，计算机存储的最小单位是byte，即8位，ASCII码中最高位设置为0，用剩下的7位表示字符。这7位可以看做数字0到127，ASCII码规定了从0到127个，每个数字代表什么含义。</p><p>数字32到126表示的这些字符都是可打印字符，0到31和127表示一些不可以打印的字符，这些字符一般用于控制目的，这些字符中大部分都是不常用的，下表列出了其中相对常用的字符。</p><table><thead><tr><th>数字</th><th>缩写</th><th>解释</th><th>转义字符</th></tr></thead><tbody><tr><td>0</td><td>NUL</td><td>空字符</td><td>\0</td></tr><tr><td>8</td><td>BS</td><td>退格</td><td>\b</td></tr><tr><td>9</td><td>HT</td><td>水平制表符</td><td>\t</td></tr><tr><td>10</td><td>LF</td><td>换行符</td><td>\n</td></tr><tr><td>13</td><td>CR</td><td>回车键</td><td>\r</td></tr><tr><td>27</td><td>ESC</td><td>换码</td><td></td></tr><tr><td>127</td><td>DEL</td><td>删除</td><td></td></tr></tbody></table><p>Ascii 码对美国是够用了，但对别的国家而言却是不够的，于是，各个国家的各种计算机厂商就发明了各种各种的编码方式以表示自己国家的字符，为了保持与Ascii 码的兼容性，一般都是将最高位设置为1。也就是说，当最高位为0时，表示Ascii码，当为1时就是各个国家自己的字符。</p><p>在这些扩展的编码中，在西欧国家中流行的是ISO 8859-1和Windows-1252，在中国是GB2312，GBK，GB18030和Big5，我们逐个来看下这些编码。</p><h3 id="ISO-8859-1"><a href="#ISO-8859-1" class="headerlink" title="ISO 8859-1"></a>ISO 8859-1</h3><p>ISO 8859-1又称Latin-1，它也是使用一个字节表示一个字符，其中0到127与Ascii一样，128到255规定了不同的含义。</p><p>在128到255中，128到159表示一些控制字符，这些字符也不常用，就不介绍了。</p><h3 id="Windows-1252"><a href="#Windows-1252" class="headerlink" title="Windows-1252"></a>Windows-1252</h3><p>ISO 8859-1虽然号称是标准，用于西欧国家，但它连欧元(€) 这个符号都没有，因为欧元比较晚，而标准比较早。实际使用中更为广泛的是Windows-1252编码，这个编码与ISO8859-1基本是一样的，区别只在于数字128到159，Windows-1252使用其中的一些数字表示可打印字符。</p><p>ISO 8859-1基本已被Windows-1252取代，在很多应用程序中，即使文件声明它采用的是ISO 8859-1编码，解析的时候依然被当做Windows-1252编码。</p><p>HTML5 甚至明确规定，如果文件声明的是ISO 8859-1编码，它应该被看做Windows-1252编码。为什么要这样呢？因为大部分人搞不清楚ISO 8859-1和Windows-1252的区别，当他说ISO 8859-1的时候，其实他实际指的是Windows-1252，所以标准干脆就这么强制了。</p><h3 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h3><p>美国和西欧字符用一个字节就够了，但中文显然是不够的。中文第一个标准是GB2312。</p><p>GB2312标准主要针对的是简体中文常见字符，包括约7000个汉字，不包括一些罕用词，不包括繁体字。</p><p>GB2312固定使用两个字节表示汉字，在这两个字节中，最高位都是1，如果是0，就认为是Ascii字符。在这两个字节中，其中高位字节范围是0xA1-0xF7，低位字节范围是0xA1-0xFE。</p><h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><p>GBK建立在GB2312的基础上，向下兼容GB2312，也就是说，GB2312编码的字符和二进制表示，在GBK编码里是完全一样的。</p><p>GBK增加了一万四千多个汉字，共计约21000汉字，其中包括繁体字。</p><p>GBK同样使用固定的两个字节表示，其中高位字节范围是0x81-0xFE，低位字节范围是0x40-0x7E和0x80-0xFE。</p><p>需要注意的是，低位字节是从0x40也就是64开始的，也就是说，低位字节最高位可能为0。那怎么知道它是汉字的一部分，还是一个Ascii字符呢？</p><p>其实很简单，因为汉字是用固定两个字节表示的，在解析二进制流的时候，如果第一个字节的最高位为1，那么就将下一个字节读进来一起解析为一个汉字，而不用考虑它的最高位，解析完后，跳到第三个字节继续解析。</p><h3 id="GB18030"><a href="#GB18030" class="headerlink" title="GB18030"></a>GB18030</h3><p>GB18030向下兼容GBK，增加了五万五千多个字符，共七万六千多个字符。包括了很多少数民族字符，以及中日韩统一字符。</p><p>用两个字节已经表示不了GB18030中的所有字符，GB18030使用变长编码，有的字符是两个字节，有的是四个字节。</p><p>在两字节编码中，字节表示范围与GBK一样。在四字节编码中，第一个字节的值从0x81到0xFE，第二个字节的值从0x30到0x39，第三个字节的值从0x81到0xFE，第四个字节的值从0x30到0x39。</p><p>解析二进制时，如何知道是两个字节还是四个字节表示一个字符呢？看第二个字节的范围，如果是0x30到0x39就是四个字节表示，因为两个字节编码中第二字节都比这个大。</p><h3 id="Big5"><a href="#Big5" class="headerlink" title="Big5"></a>Big5</h3><p>Big5是针对繁体中文的，广泛用于台湾香港等地。</p><p>Big5包括1万3千多个繁体字，和GB2312类似，一个字符同样固定使用两个字节表示。在这两个字节中，高位字节范围是0x81-0xFE，低位字节范围是0x40-0x7E和0xA1-0xFE。</p><h3 id="编码总结"><a href="#编码总结" class="headerlink" title="编码总结"></a>编码总结</h3><p>我们简单总结一下上面的内容。</p><p>Ascii码是基础，一个字节表示，最高位设为0，其他7位表示128个字符。其他编码都是兼容Ascii的，最高位使用1来进行区分。</p><p>西欧主要使用Windows-1252，使用一个字节，增加了额外128个字符。</p><p>中文大陆地区的三个主要编码GB2312，GBK，GB18030，有时间先后关系，表示的字符数越来越多，且后面的兼容前面的，GB2312和GBK都是用两个字节表示，而GB18030则使用两个或四个字节表示。</p><p>香港台湾地区的主要编码是Big5。</p><p>如果文本里的字符都是Ascii码字符，那么采用以上所说的任一编码方式都是一一样的。</p><p>但如果有高位为1的字符，除了GB2312/GBK/GB18030外，其他编码都是不兼容的，比如，Windows-1252和中文的各种编码是不兼容的，即使Big5和GB18030都能表示繁体字，其表示方式也是不一样的，而这就会出现所谓的乱码。</p><h3 id="为什么会出现乱码"><a href="#为什么会出现乱码" class="headerlink" title="为什么会出现乱码"></a>为什么会出现乱码</h3><p>一个法国人，采用Windows-1252编码写了个文件，发送给了一个中国人，中国人使用GB18030来解析这个字符，看到的就是乱码，我们举个例子：</p><p>法 国人发送的是 “Pékin”，Windows-1252的二进制是（采用16进制）：50 E9 6B 69 6E，第二个字节E9对应é，其他都是Ascii码，中国人收到的也是这个二进制，但是他把它看做成了GB18030编码，GB18030中E9 6B对应的是字符”閗i”，于是他看到的就是：”P閗in”，这看来就是一个乱码。</p><p>反之也是一样的，一个GB18030编码的文件如果被看做Windows-1252也是乱码。</p><p>这 种情况下，之所以看起来是乱码，是因为看待或者说解析数据的方式错了。纠正的方式，只要使用正确的编码方式进行解读就可以了。很多文件编辑器，如 EditPlus, NotePad++, UltraEdit都有切换查看编码方式的功能，浏览器也都有切换查看编码方式的功能，如Firefox，在菜单 “查看”-&gt;”文字编码”中。</p><p>切换查看编码的方式，并没有改变数据的二进制本身，而只是改变了解析数据的方式，从而改变了数据看起来的样子。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小数计算为什么不精确</title>
      <link href="2018/05/02/%E5%B0%8F%E6%95%B0%E8%AE%A1%E7%AE%97%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%B2%BE%E7%A1%AE/"/>
      <url>2018/05/02/%E5%B0%8F%E6%95%B0%E8%AE%A1%E7%AE%97%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%B2%BE%E7%A1%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="违反直觉"><a href="#违反直觉" class="headerlink" title="违反直觉"></a>违反直觉</h2><p>计算机之所以叫”计算”机就是因为发明它主要是用来计算的，”计算”当然是它的特长，在大家的印象中，计算一定是非常准确的。但实际上，即使在一些非常基本的小数运算中，计算的结果也是不精确的。</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">0.1f</span>*<span class="number">0.1f</span>;</span><br><span class="line">System.out.println(f);</span><br></pre></td></tr></table></figure><p>这个结果看上去，不言而喻，应该是0.01，但实际上，屏幕输出却是0.010000001，后面多了个1。</p><p>看上去这么简单的运算，计算机怎么会出错了呢？</p><h2 id="为什么会出错呢？"><a href="#为什么会出错呢？" class="headerlink" title="为什么会出错呢？"></a>为什么会出错呢？</h2><p>实际上，不是运算本身会出错，而是计算机根本就不能精确的表示很多数，比如0.1这个数。</p><p>计算机是用一种二进制格式存储小数的，这个二进制格式不能精确表示0.1，它只能表示一个非常接近0.1但又不等于0.1的一个数。</p><p>数字都不能精确表示，在不精确数字上的运算结果不精确也就不足为奇了。</p><p>0.1怎么会不能精确表示呢？在十进制的世界里是可以的，但在二进制的世界里不行。在说二进制之前，我们先来看下熟悉的十进制。</p><p>实际上，十进制也只能表示那些可以表述为10的多少次方和的数，比如12.345，实际上表示的：1<em>10+2</em>1+3<em>0.1+4</em>0.01+5*0.001，与整数的表示类似，小数点后面的每个位置也都有一个位权，从左到右，依次为 0.1,0.01,0.001,…即10^(-1), 10^(-2), 10^(-3)。</p><p>很多数，十进制也是不能精确表示的，比如1/3, 保留三位小数的话，十进制表示是0.333，但无论后面保留多少位小数，都是不精确的，用0.333进行运算，比如乘以3，期望结果是1，但实际上却是0.999。</p><p>二进制是类似的，但二进制只能表示哪些可以表述为2的多少次方和的数，来看下2的次方的一些例子：</p><table><thead><tr><th>2的次方</th><th>十进制</th></tr></thead><tbody><tr><td>2^(-1)</td><td>0.5</td></tr><tr><td>2^(-2)</td><td>0.25</td></tr><tr><td>2^(-3)</td><td>0.125</td></tr><tr><td>2^(-4)</td><td>0.0625</td></tr></tbody></table><p>因此只可以精确表示为2的某次方之和的数，其他数则不能精确表示。</p><h2 id="为什么一定要用二进制呢？"><a href="#为什么一定要用二进制呢？" class="headerlink" title="为什么一定要用二进制呢？"></a>为什么一定要用二进制呢？</h2><p>为什么就不能用我们熟悉的十进制呢？在最最底层，计算机使用的电子元器件只能表示两个状态，通常是低压和高压，对应0和1，使用二进制容易基于这些电子器件构建硬件设备和进行运算。如果非要使用十进制，则这些硬件就会复杂很多，并且效率低下。</p><h2 id="为什么有的小数计算是准确的？"><a href="#为什么有的小数计算是准确的？" class="headerlink" title="为什么有的小数计算是准确的？"></a>为什么有的小数计算是准确的？</h2><p>如果你编写程序进行试验，你会发现有的计算结果是准确的。比如，我用Java写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">0.1f</span> + <span class="number">0.1f</span>);</span><br><span class="line">System.out.println(<span class="number">0.1f</span> * <span class="number">0.1f</span>);</span><br></pre></td></tr></table></figure><p>第一行输出0.2，第二行输出0.010000001。按照上面的说法，第一行的结果应该也不对啊？</p><p>其实，这只是Java语言给我们造成的假象，计算结果其实也是不精确的，但是由于结果和0.2足够接近，在输出的时候，Java选择了输出0.2这个看上去非常精简的数字，而不是一个中间有很多0的小数。</p><p>在误差足够小的时候，结果看上去是精确的，但不精确才是常态。</p><h2 id="怎么处理计算不精确"><a href="#怎么处理计算不精确" class="headerlink" title="怎么处理计算不精确"></a>怎么处理计算不精确</h2><p>计算不精确，怎么办呢？</p><ul><li>减小精度。大部分情况下，我们不需要那么高的精度，可以四舍五入，或者在输出的时候只保留固定个数的小数位。</li><li>进行转换。如果真的需要比较高的精度，可以将小数转化为整数进行运算，运算结束后再转化为小数。</li><li>使用十进制的数据类型。这个没有统一的规范，在Java中是用BigDecimal，运算更准确，但效率比较低。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>小数计算为什么会出错呢？</p><p>理由就是：很多小数计算机中不能精确表示，通常只可以精确表示为2的某次方之和的数，其他数则不能精确表示。计算机的基本思维是二进制的，所以，意料之外，情理之中吧。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数的二进制表示和位运算</title>
      <link href="2018/04/08/%E6%95%B4%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E5%92%8C%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>2018/04/08/%E6%95%B4%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E5%92%8C%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>上节我们提到正整数相乘的结果居然出现了负数，要理解这个行为，我们需要看下整数在计算机内部的二进制表示。</p><h2 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h2><p>要理解二进制，我们先来看下熟悉的十进制。十进制是如此的熟悉，我们可能已忽略了它的含义。比如123，我们不假思索就知道它的值是多少。</p><p>但其实123表示的1*(10^2) + 2*(10^1) + 3*(10^0)，(10^2表示10的二次方)，它表示的是各个位置数字含义之和，每个位置的数字含义与位置有关，从右向左，第一位乘以10的0次方， 即1，第二位乘以10的1次方，即10，第三位乘以10的2次方，即100，依次类推。</p><p>换句话说，每个位置都有一个位权，从右到左，第一位为1，然后依次乘以10，即第二位为10，第三位为100，依次类推。</p><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><h3 id="正整数的二进制表示"><a href="#正整数的二进制表示" class="headerlink" title="正整数的二进制表示"></a>正整数的二进制表示</h3><p>正整数的二进制表示与此类似， 只是在十进制中，每个位置可以有10个数字，从0到9，但在二进制中，每个位置只能是0或1。位权的概念是类似的，从右到左，第一位为1，然后依次乘以2，即第二位为2，第三位为4，依次类推。</p><p>看一些数字的例子吧</p><table><thead><tr><th>二进制</th><th>十进制</th></tr></thead><tbody><tr><td>10</td><td>2</td></tr><tr><td>11</td><td>3</td></tr><tr><td>111</td><td>7</td></tr><tr><td>1010</td><td>10</td></tr></tbody></table><h3 id="负整数的二进制表示"><a href="#负整数的二进制表示" class="headerlink" title="负整数的二进制表示"></a>负整数的二进制表示</h3><p>十进制的负数表示就是在前面加一个负数符号-，例如-123。但二进制如何表示负数呢？</p><p>其实概念是类似的，二进制使用最高位表示符号位，用1表示负数，用0表示正数。</p><p>但哪个是最高位呢？整数有四种类型，byte/short/int/long，分别占1/2/4/8个字节，即分别占8/16/32/64位，每种类型的符号位都是其最左边的一位。</p><p>为方便举例，下面假定类型是byte，即从右到左的第8位表示符号位。</p><p>但负数表示不是简单的将最高位变为1，比如说：</p><ul><li>byte a = -1，如果只是将最高位变为1，二进制应该是10000001，但实际上，它应该是11111111。</li><li>byte a=-127，如果只是将最高位变为1，二进制应该是11111111，但实际上，它却应该是10000001。</li></ul><p>和我们的直觉正好相反，这是什么表示法？这种表示法称为补码表示法，而符合我们直觉的表示称为原码表示法，补码表示就是在原码表示的基础上取反然后加1。取反就是将0变为1，1变为0。</p><p>负数的二进制表示就是对应的正数的补码表示，比如说：</p><ul><li>-1：1的原码表示是00000001，取反是11111110，然后再加1，就是11111111。</li><li>-2：2的原码表示是00000010，取反是11111101，然后再加1，就是11111110。</li><li>-127：127的原码表示是01111111，取反是10000000，然后再加1，就是10000001。</li></ul><p>给定一个负数二进制表示，要想知道它的十进制值，可以采用相同的补码运算。比如：10010010，首先取反，变为01101101，然后加1，结果为01101110，它的十进制值为110，所以原值就是-110。直觉上，应该是先减1，然后再取反，但计算机只能做加法，而补码的一个良好特性就是，对负数的补码表示做补码运算就可以得到其对应整数的原码，正如十进制运算中负负得正一样。</p><p>byte类型，正数最大表示是01111111，即127，负数最小表示（绝对值最大）是10000000，即-128，表示范围就是 -128到127。其他类型的整数也类似，负数能多表示一个数。</p><p><strong>负整数为什么采用补码呢？</strong></p><p>负整数为什么要采用这种奇怪的表示形式呢？原因是：只有这种形式，计算机才能实现正确的加减法。</p><p>计算机其实只能做加法，1-1其实是1+(-1)。如果用原码表示，计算结果是不对的。比如说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 1 -&gt; 00000001</span><br><span class="line">-1 -&gt; 10000001</span><br><span class="line">+ ------------------</span><br><span class="line">-2 -&gt; 10000010</span><br></pre></td></tr></table></figure><p>用符合直觉的原码表示，1-1的结果是-2。</p><p>如果是补码表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 1 -&gt; 00000001</span><br><span class="line">-1 -&gt; 11111111</span><br><span class="line">+ ------------------</span><br><span class="line"> 0 -&gt; 00000000</span><br></pre></td></tr></table></figure><p>结果是正确的。</p><p>再比如，5-3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 5 -&gt; 00000101</span><br><span class="line">-3 -&gt; 11111101</span><br><span class="line">+ ------------------</span><br><span class="line"> 2 -&gt; 00000010</span><br></pre></td></tr></table></figure><p>结果也是正确的。</p><p>就是这样的，看上去可能比较奇怪和难以理解，但这种表示其实是非常严谨和正确的，是不是很奇妙？</p><p>理解了二进制加减法，我们就能理解为什么正数的运算结果可能出现负数了。当计算结果超出表示范围的时候，最高位往往是1，然后就会被看做负数。比如说，127+1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127   -&gt; 01111111</span><br><span class="line">1     -&gt; 00000001</span><br><span class="line">+ ------------------</span><br><span class="line">-128  -&gt; 10000000</span><br></pre></td></tr></table></figure><p>计算结果超出了byte的表示范围，会被看做-128。</p><h2 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h2><p>二进制写起来太长，为了简化写法，可以将四个二进制位简化为一个0到15的数，10到15用字符A到F表示，这种表示方法称为16进制，如下所示：</p><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th></tr></thead><tbody><tr><td>1010</td><td>10</td><td>A</td></tr><tr><td>1011</td><td>11</td><td>B</td></tr><tr><td>1100</td><td>12</td><td>C</td></tr><tr><td>1101</td><td>13</td><td>D</td></tr><tr><td>1110</td><td>14</td><td>E</td></tr><tr><td>1111</td><td>15</td><td>F</td></tr></tbody></table><p>可以用16进制直接写常量数字，在数字前面加0x即可。比如10进制的123，用16进制表示是0x7B，即123 = 7*16+11。给整数赋值或者进行运算的时候，都可以直接使用16进制，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0x7B</span>;</span><br></pre></td></tr></table></figure><p>Java中不支持直接写二进制常量，比如，想写二进制形式的11001，Java中不能直接写，可以在前面补0，补足8位，为00011001，然后用16进制表示，即 0x19。</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>位运算是将数据看做二进制，进行位级别的操作，Java不能单独表示一个位，但是可以用byte表示8位，可以用16进制写二进制常量。比如： 0010表示成16进制是 0x2, 110110表示成16进制是 0x36。</p><p>位运算有移位运算和逻辑运算。</p><p>移位有：</p><ul><li>左移：操作符为&lt;&lt;，向左移动，右边的低位补0，高位的就舍弃掉了，将二进制看做整数，左移1位就相当于乘以2。</li><li>无符号右移：操作符为&gt;&gt;&gt;，向右移动，右边的舍弃掉，左边补0。</li><li>有符号右移：操作符为&gt;&gt;，向右移动，右边的舍弃掉，左边补什么取决于原来最高位是什么，原来是1就补1，原来是0就补0，将二进制看做整数，右移1位相当于除以2。</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">4</span>; <span class="comment">// 100</span></span><br><span class="line">a = a &gt;&gt; <span class="number">2</span>; <span class="comment">// 001，等于1</span></span><br><span class="line">a = a &lt;&lt; <span class="number">3</span> <span class="comment">// 1000，变为8</span></span><br></pre></td></tr></table></figure><p>逻辑运算有：</p><ul><li>按位与 &amp;：两位都为1才为1</li><li>按位或 |：只要有一位为1，就为1</li><li>按位取反 ~： 1变为0，0变为1</li><li>按位异或 ^ ：相异为真，相同为假</li></ul><p>大部分都比较简单，就不详细说了。具体形式，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = ...;</span><br><span class="line">a = a &amp; <span class="number">0x1</span> <span class="comment">// 返回0或1，就是a最右边一位的值。</span></span><br><span class="line">a = a | <span class="number">0x1</span> <span class="comment">//不管a原来最右边一位是什么，都将设为1</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节我们讨论了整数的二进制表示，需要注意的就是负数的二进制表示，以及计算机进行二进制加减操作的过程，从而我们就能理解为什么有的时候正整数计算会出现负数。</p><p>理解了整数，那小数呢？请见下节分享。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本运算</title>
      <link href="2018/04/05/%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/"/>
      <url>2018/04/05/%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>计算机之所以称为”计算”机，是因为发明它的主要目的就是运算。运算有不同的类型，不同的数据类型支持的运算也不一样，本文介绍Java中基本类型数据的主要运算。</p><ul><li>算术运算：主要是日常的加减乘除</li><li>比较运算：主要是日常的大小比较</li><li>逻辑运算：针对布尔值进行运算</li></ul><h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><p>算术运算符有加减乘除，符号分别是+-*/，另外还有取模运算符%，以及自增(++)和自减(–)运算符。取模运算适用于整数和字符类型，其他算术运算适用于所有数值类型和字符类型，其他都符合常识，但字符类型看上去比较奇怪，后续文章解释。</p><p>减号(-)通常用于两个数相减， 但也可以放在一个数前面，例如 -a, 这表示改变a的符号，原来的正数会变为负数，原来的负数会变为正数，这也是符合我们常识的。</p><p>取模(%)就是数学中的求余数，例如，5%3是2，10%5是0。</p><p>自增(++)和自减(–)，是一种快捷方式，是对自己进行加一或减一操作。</p><p>加减乘除大部分情况和直观感觉是一样的，都很容易理解，但有一些需要注意的地方，而自增自减稍微复杂一些，下面我们解释下。</p><p><strong>加减乘除注意事项</strong></p><p>运算时要注意结果的范围，使用恰当的数据类型。两个正数都可以用int表示，但相乘的结果可能就会超，超出后结果会令人困惑，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">2147483647</span>*<span class="number">2</span>; <span class="comment">//2147483647是int能表示的最大值</span></span><br></pre></td></tr></table></figure><p>a的结果是-2。为什么是-2我们暂不解释，要避免这种情况，我们的结果类型应使用long，但只改为long也是不够的，因为运算还是默认按照int类型进行，需要将至少一个数据表示为long形式，即在后面加L或l，下面这样才会出现期望的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> a = <span class="number">2147483647</span>*<span class="number">2L</span>;</span><br></pre></td></tr></table></figure><p>另外，需要注意的是，整数相除不是四舍五入，而是直接舍去小数位，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">10</span>/<span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>结果是2而不是2.5，如果要按小数进行运算，需要将至少一个数表示为小数形式，或者使用强制类型转化，即在数字前面加(double)，表示将数字看做double类型，如下所示任意一种形式都可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">10</span>/<span class="number">4.0</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">10</span>/(<span class="keyword">double</span>)<span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><strong>小数计算结果不精确</strong></p><p>无论是使用float还是double，进行运算时都会出现一些非常令人困惑的现象，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">0.1f</span>*<span class="number">0.1f</span>;</span><br><span class="line">System.out.println(f);</span><br></pre></td></tr></table></figure><p>这个结果看上去，不言而喻，应该是0.01，但实际上，屏幕输出却是0.010000001，后面多了个1。换用double看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">0.1</span>*<span class="number">0.1</span>;</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure><p>屏幕输出0.010000000000000002，一连串的0之后多了个2，结果也不精确。</p><p>这是怎么回事？看上去这么简单的运算，计算机怎么能计算不精确呢？但事实就是这样，究其原因，我们需要理解float和double的二进制表示，后续文章进行分析。</p><p><strong>自增(++)/自减(–)</strong></p><p>自增/自减是对自己做加一和减一操作，但每个都有两种形式，一种是放在变量后，例如a++, a–，另一种是放在变量前，例如++a, –a。</p><p>如果只是对自己操作，这两种形式也没什么差别，区别在于还有其他操作的时候。放在变量后(a++)，是先用原来的值进行其他操作，然后再对自己做修改，而放在变量前(++a)，是先对自己做修改，再用修改后的值进行其他操作。例如，快捷运算和其等同的运算分别是：</p><table><thead><tr><th>快捷运算</th><th>等同运算</th></tr></thead><tbody><tr><td>b=a++-1</td><td>b=a-1 <br> a=a+1</td></tr><tr><td>c = ++a-1</td><td>a=a+1 <br> c=a-1</td></tr><tr><td>arrA[i++]=arrB[++j]</td><td>j=j+1 <br> arrA[i]=arrB[j] <br> i=i+1</td></tr></tbody></table><p>自增/自减是”快捷”操作，是让程序员少写代码的，但遗憾的是，由于比较奇怪的语法和诡异的行为，带给了初学者一些困惑。</p><h2 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h2><p>比较运算就是计算两个值之间的关系，结果是一个布尔类型(boolean)的值。比较运算适用于所有数值类型和字符类型。数值类型容易理解，但字符怎么比呢？后续文章解释。</p><p>比较操作符有：大于(&gt;)，大于等于(&gt;=)，小于(&lt;)，小于等于(&lt;=)，等于(==)，不等于(!=)。</p><p>大部分也都是比较直观的，需要注意的是等于。</p><p>首先，它使用两个等号==，而不是一个等号(=)，为什么不用一个等号呢？因为一个等号(=)已经被占了，表示赋值操作。</p><p>另外，对于数组，==判断的是两个数组是不是同一个数组，而不是两个数组的元素内容是否一样，即使两个数组的内容是一样的，但如果是两个不同的数组，==依然会返回false，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// a==b的结果是false</span></span><br></pre></td></tr></table></figure><p>如果需要比较数组的内容是否一样，需要逐个比较里面存储的每个元素。</p><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><p>逻辑运算根据数据的逻辑关系，生成一个布尔值true或者false。逻辑运算只可应用于boolean类型的数据，但比较运算的结果是布尔值，所以其他类型数据的比较结果可进行逻辑运算。</p><p>逻辑运算符具体有：</p><ul><li>与(&amp;)：两个都为true才是true，只要有一个是false就是false</li><li>或(|)：只要有一个为true就是true，都是false才是false</li><li>非(!)：针对一个变量，true会变成false, false会变成true</li><li>异或(^)：两个相同为false, 两个不相同为true</li><li>短路与(&amp;&amp;): 和&amp;类似，不同之处马上解释</li><li>短路或 (||)：与|类似，不同之处马上解释<br>逻辑运算的大部分都是比较直观的，需要注意的是&amp;和&amp;&amp;，以及|和||的区别。如果只是进行逻辑运算，它们也都是相同的，区别在于同时有其他操作的情况下，例如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> a = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> flag = a | b++&gt;<span class="number">0</span>;</span><br></pre></td></tr></table></figure>因为a为true，所以flag也为true，但b的结果为1，因为|后面的式子也会进行运算，即使只看a已经知道flag的结果，还是会进行后面的运算。而||则不同，如果最后一句的代码是：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = a || b++&gt;<span class="number">0</span>;</span><br></pre></td></tr></table></figure>则b的值还是0，因为||会”短路”，即在看到||前面部分就可以判定结果的情况下，忽略||后面的运算。</li></ul><p>这个例子我们还可以看出，自增/自减操作带给我们的困扰，别的操作都干干脆脆，赋值就赋值，加法就加法，比较就比较，它非混在一起，可能会少写些代码，但如果使用不当，会使理解困难很多。</p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>一个稍微复杂的运算可能会涉及多个变量，和多种运算，那哪个先算，哪个后算呢？程序语言规定了不同运算符的优先级，有的会先算，有的会后算，大部分情况下，这个优先级与我们的常识理解是相符的。</p><p>但在一些复杂情况下，我们可能会搞不明白其运算顺序。但这个我们不用太操心，可以使用括号()来表达我们想要的顺序，括号里的会先进行运算，简单的说，不确定顺序的时候，就使用括号。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节我们介绍了算术运算，比较运算和逻辑运算，但我们遗留了一些问题，比如：</p><ul><li>正整数相乘的结果居然出现了负数</li><li>非常基本的小数运算结果居然不精确</li><li>字符类型怎么也可以进行算术运算和比较</li></ul><p>这是怎么回事呢? 请见下节分享。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量赋值</title>
      <link href="2018/04/01/%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC/"/>
      <url>2018/04/01/%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>通过声明变量，每个变量赋予一个数据类型和一个有意义的名字，我们就告诉了计算机我们要操作的数据。<br>有了数据，我们能做很多操作。但本文只说说对数据做的第一个操作：赋值</p><p>声明变量之后，就在内存分配了一块位置，但这个位置的内容是未知的，赋值就是把这块位置的内容设为一个确定的值。</p><p>Java中基本类型、数组、对象的赋值有明显不同。这里先介绍基本类型和数组的赋值，关于对象后续文章会详述。</p><h4 id="基本类型的赋值"><a href="#基本类型的赋值" class="headerlink" title="基本类型的赋值"></a>基本类型的赋值</h4><p><b>整数类型</b><br>整数类型有byte, short, int和long，分别占用1/2/4/8个字节，取值范围分别是：</p><table><thead><tr><th>类型名</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>-2^7 ~ 2^7-1</td></tr><tr><td>short</td><td>-2^15 ~ 2^15-1</td></tr><tr><td>int</td><td>-2^31 ~ 2^31-1</td></tr><tr><td>long</td><td>-2^63 ~ 2^63-1</td></tr></tbody></table><p>我们用^表示指数，2^7即2的7次方。这个范围我们不需要记的那么清楚，有个大概范围认识就可以了，<br>大多数日常应用，一般用int就可以了。后续文章会从二进制的角度进一步分析表示范围为什么会是这样的。</p><p>赋值形式很简单，直接把熟悉的数字常量形式赋值给变量即可，对应的内存空间的值就从未知变成了确定的常量。但常量不能<br>超过对应类型的表示范围。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">short</span> s = <span class="number">3333</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">9999</span>;</span><br><span class="line"><span class="keyword">long</span> l = <span class="number">32323</span>;</span><br></pre></td></tr></table></figure><p>但是，在给long类型赋值时，如果常量超过了int的表示范围，需要在常量后面加大写或小写的L，即L或l，例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> a = <span class="number">3232343433L</span>;</span><br></pre></td></tr></table></figure><p>这个是由于数字常量默认为是int类型。</p><p><b>小数类型</b></p><p>小数类型有float和double，占用的内存空间分别是4和8个字节，有不同的取值范围和精度，double表示的范围更大，精度更高，具体来说：</p><table><thead><tr><th>类型名</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>1.4E-45 ~ 3.4E+38 <br> -3.4E+38 ~-1.4E-45</td></tr><tr><td>double</td><td>4.9E-324 ~1.7E+308 <br> -1.7E+308 ~ -4.9E-324</td></tr></tbody></table><p>取值范围看上去很奇怪，一般我们也不需要记住，有个大概印象就可以了。E表示以10为底的指数，E后面的+号和-号代表正指<br>数和负指数，例如：1.4E-45表示1.4乘以10的-45次方。</p><p>对于double，直接把熟悉的小数表示赋值给变量即可，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">333.33</span>;</span><br></pre></td></tr></table></figure><p>但对于float，需要在数字后面加大写F或小写f，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">333.33f</span>;</span><br></pre></td></tr></table></figure><p>这个是由于小数常量默认为是double类型。</p><p>除了小数，也可以把整数直接赋值给float或double，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">33</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">3333333333333L</span>;</span><br></pre></td></tr></table></figure><p><b>boolean类型</b></p><p>这个很简单，直接使用true或false赋值，分别表示真和假，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">true</span>;</span><br><span class="line">b = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><p><b>字符类型</b></p><p>字符类型char用于表示一个字符，这个字符可以是中文字符，也可以是英文字符。在内存中，Java用两个字节表示一个字符。<br>赋值时把常量字符用单引号括起来，不要使用双引号，例如：<br>java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> z = <span class="string">&#x27;中&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上面介绍的赋值都是在声明变量的时候就进行了赋值，但这不是必须的，可以先声明变量，随后再进行赋值。</p><h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><p><strong>赋值语法</strong></p><p>基本类型的数组有三种赋值形式，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="number">2.</span> <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="number">3.</span> <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">   arr[<span class="number">0</span>]=<span class="number">1</span>; arr[<span class="number">1</span>]=<span class="number">2</span>; arr[<span class="number">2</span>]=<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>第一种和第二种都是预先知道数组的内容，而第三种是先分配长度，然后再给每个元素赋值。</p><p>第三种形式中，即使没有给每个元素赋值，每个元素也都有一个默认值，这个默认值跟数组类型有关。数值类型的值为0，<br>boolean为false, char为空字符。</p><p>数组长度可以动态确定，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> length = ... ;<span class="comment">//根据一些条件动态计算</span></span><br><span class="line"><span class="keyword">int</span> arr = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br></pre></td></tr></table></figure><p>虽然可以动态确定，但定了之后就不可以变，数组有一个length属性，但只能读，不能改。</p><p>一个小细节，不能在给定初始值的同时还给定长度，即如下格式是不允许的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>数组和基本类型的区别</strong></p><p>一个基本类型变量，内存中只会有一块对应的内存空间。但数组有两块，一块用于存储数组内容本身，另一块用于存储内容的位置。</p><p>用一个例子来说明，有一个int变量a，和一个int数组变量arr，其代码，变量对应的内存地址和内存内容如下所示：</p><table><thead><tr><th>代码</th><th>内存地址</th><th>内存数据</th></tr></thead><tbody><tr><td>int a = 100;</td><td>1000</td><td>100</td></tr><tr><td>int[] arr = {1,2,3};</td><td>2000</td><td>3000</td></tr><tr><td></td><td>3000</td><td>1</td></tr><tr><td></td><td>3004</td><td>2</td></tr><tr><td></td><td>3008</td><td>3</td></tr></tbody></table><p>基本类型a的内存地址是1000，这个位置存储的就是它的值100。数组类型arr的内存地址是2000，这个位置存储的值是一个位置3000，3000开始的位置存储的才是实际的数据1,2,3。</p><p><strong>为什么数组要用两块空间</strong></p><p>不能只用一块空间吗？我们来看下面这个代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arrA = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arrB = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">arrA = arrB;</span><br></pre></td></tr></table></figure><p>这个代码中，arrA初始的长度是3，arrB的长度是4，后来将arrB的值赋给了arrA。如果arrA对应的内存空间是直接存储的数组内容，那么它将没有足够的空间去容纳arrB的所有元素。</p><p>用两块空间存储，这个就简单的多，arrA存储的值就变成了和arrB的一样，存储的都是数组内容{4,5,6,7}的地址，此后访问arrA就和arrB是一样的了，而arrA {1,2,3}的内存空间由于无人引用会被垃圾回收，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arrA       &#123;1,2,3&#125;</span><br><span class="line"></span><br><span class="line">      \</span><br><span class="line"></span><br><span class="line">        \</span><br><span class="line"></span><br><span class="line">arrB  -&gt;  &#123;4,5,6,7&#125;</span><br></pre></td></tr></table></figure><p>由上，也可以看出，给数组变量赋值和给数组中元素赋值是两回事。给数组中元素赋值是改变数组内容，而给数组变量赋值则会让变量指向一个不同的位置。</p><p>上面我们说数组的长度是不可以变的，不可变指的是数组的内容空间，一经分配，长度就不能再变了，但是可以改变数组变量的值，让它指向一个长度不同的空间，就像上例中arrA后来指向了arrB一样。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>给变量赋值就是将变量对应的内存空间设置为一个明确的值，有了值之后，变量可以被加载到CPU，CPU可以对这些值进行各种运算，运算后的结果又可以被赋值给变量，保存到内存中。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据与变量</title>
      <link href="2018/03/31/%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%8F%98%E9%87%8F/"/>
      <url>2018/03/31/%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="程序大概是怎么回事"><a href="#程序大概是怎么回事" class="headerlink" title="程序大概是怎么回事"></a>程序大概是怎么回事</h2><p>计算机就是个机器，这个机器主要由CPU、内存、硬盘和输入输出设备组成。计算机上跑着操作系统，如Windows或Linux，操作系统上运行着各种应用程序，如Word, QQ等。<br>操作系统将时间分成很多细小的时间片，一个时间片给一个程序用，另一个时间片给另一个程序用，并频繁地在程序间切换。不过，在应用程序看来，整个机器资源好像都归他使，操作系统给他提供了这种假象。 对程序员而言，我们写程序，基本不用考虑其他应用程序，我们想好怎么做自己的事就可以了。<br>应用程序看上去能做很多事情，能读写文档，能播放音乐，能聊天，能玩游戏，能下围棋 …… 但本质上，计算机只会执行预先写好的指令而已，这些指令也只是操作数据或者设备。所谓程序，基本上就是告诉计算机要操作的数据和执行的指令序列， 即对什么数据做什么操作。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>数据是什么？数据在计算机内部都是二进制，不方便操作，为了方便操作数据，高级语言引入了”数据类型”和”变量”的概念。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型用于对数据归类，方便理解和操作，对Java语言而言，有如下基本数据类型：</p><ul><li>整数类型：有四种整型 byte/short/int/long，分别有不同的取值范围</li><li>小数类型 ：有两种类型 float/double，有不同的取值范围和精度</li><li>字符类型：char，表示单个字符</li><li>真假类型：boolean，表示真假</li></ul><p>基本数据类型都有对应的数组类型，数组表示固定长度的同种数据类型的多条记录，这些数据在内存中挨在一起存放。 比如说，一个自然数可以用一个整数类型数据表示，100个连续的自然数可以用一个长度为100的整数数组表示。一个字符用一个char表示，一段文字可以用一个char数组表示。<br>Java是一个面向对象的语言，除了基本数据类型，其他都是对象类型 ，对象到底是什么呢？简单的说，对象是由基本数据类型、数组和其他对象组合而成的一个东西，以方便对其整体进行操作。</p><p>比如说，一个学生对象，可以由如下信息组成：</p><ul><li>姓名：一个字符数组</li><li>年龄：一个整数</li><li>性别：一个字符</li><li>入学分数：一个小数</li></ul><p>日期在Java中也是一个对象，内部表示为整形long。<br>就像世界万物的组成，都是由元素周期表中的108个基本元素组成的，基本数据类型就相当于化学中的基本元素，而对象就相当于世界万物。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>为了操作数据，需要把数据存放到内存中，所谓内存在程序看来就是一块有地址编号的连续的空间，放到内存中的某个位置后，为了方便地找到和操作这个数据，需要给这个位置起一个名字。编程语言通过变量这个概念来表示这个过程。</p><p>声明一个变量，比如 int a其实就是在内存中分配了一个空间，这个空间存放int数据类型，a指向这个内存空间所在的位置，通过对a操作即可操作a指向的内存空间，比如a=5这个操作即可将a指向的内存空间的值改为5。</p><p>之所以叫变量，是因为它表示的是内存中的位置，这个位置存放的值是可以变化的。</p><p>虽然变量的值是可以变化的，但名字是不变的，这个名字应该代表程序员心目中这块内存位置的意义，这个意义应该是不变的，比如说这个变量int second表示时钟秒数，在不同时间可以被赋予不同的值，但它表示的就是时钟秒数。之所以说应该是因为这不是必须的，如果你非要起一个变量名叫age但赋予它身高的值，计算机也拿你没办法。</p><p>重要的话再说一遍！变量就是给数据起名字，方便找不同的数据，它的值可以变，但含义不应变。再比如说一个合同，可以有四个变量：</p><ul><li>first_party: 含义是甲方</li><li>second_party: 含义是乙方</li><li>contract_body: 含义是合同内容</li><li>contract_sign_date: 含义是合同签署日期</li></ul><p>这些变量表示的含义是确定的，但对不同的合同，他们的值是不同的。</p><p>初学编程的人经常使用像a,b,c,hehe,haha这种无意义的名字，给变量起一个有意义的名字吧!</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows批处理常用命令</title>
      <link href="2017/03/10/Windows%E6%89%B9%E5%A4%84%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2017/03/10/Windows%E6%89%B9%E5%A4%84%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>批处理文件（batch file）包含一系列 DOS命令，通常用于自动执行重复性任务。用户只需双击批处理文件便可执行任务，而无需重复输入相同指令。编写批处理文件非常简单，但难点在于确保一切按顺序执行。编写严谨的批处理文件可以极大程度地节省时间，在应对重复性工作时尤其有效</p><div class="tip"> 在Windows中善用批处理可以简化很多重复工作 </div><h2 id="什么是批处理？"><a href="#什么是批处理？" class="headerlink" title="什么是批处理？"></a>什么是批处理？</h2><ul><li><p>批处理(Batch)，也称为批处理脚本。顾名思义，批处理就是对某对象进行批量的处理。批处理文件的扩展<br>名为bat。</p></li><li><p>批处理是一种简化的脚本语言，它应用于DOS和Windows系统中，它是由DOS或者Windows系统内嵌的<br>命令解释器（通常是COMMAND.COM或者CMD.EXE）解释运行。</p></li><li><p>批处理类似于Unix中的Shell脚本。批处理文件具有.bat或者.cmd的扩展名，其最简单的例子，是逐行书写在命令行中会用到的各种命令。更复杂的情况，需要使用if，for，goto等命令控制程序的运行过程，如同C，Basic等中高级语言一样。如果需要实现更复杂的应用，利用外部程序是必要的，这包括系统本身提供的外部命令和第三方提供的工具或者软件。</p></li></ul><h2 id="怎么创建批处理文件？"><a href="#怎么创建批处理文件？" class="headerlink" title="怎么创建批处理文件？"></a>怎么创建批处理文件？</h2><ul><li>批处理文件，或称为批处理程序，是由一条条的DOS命令组成的普通文本文件，可以用记事本直接编辑或用DOS命令创建，也可以用DOS下的文本编辑器Edit.exe来编辑。在命令提示下键入批处理文件的名称，或者双击该批处理文件，系统就会调用Cmd.exe运行该批处理程序。</li><li>一般情况下，每条命令占据一行，当然也可以将多条命令用特定符号（如：&amp;、&amp;&amp;、|、||等）分隔后写入同一行中。</li><li>还有的情况就是像if、for等较高级的命令则要占据几行甚至几十几百行的空间。系统在解释运行批处理程序时，首先扫描整个批处理程序，然后从第一行代码开始向下逐句执行所有的命令，直至程序结尾或遇见exit命令或出错意外退出。</li></ul><h2 id="批处理常用命令介绍"><a href="#批处理常用命令介绍" class="headerlink" title="批处理常用命令介绍"></a>批处理常用命令介绍</h2><h3 id="echo和-命令"><a href="#echo和-命令" class="headerlink" title="echo和@命令"></a>echo和@命令</h3><p>echo表示打开回显或关闭请求回显功能，或显示消息。如果没有任何参数，echo 命令将显示当前回显设置。 </p><p>@表示不显示@后面的命令 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">::从下一行开始关闭回显 </span><br><span class="line"><span class="built_in">echo</span> off  </span><br><span class="line">::从本行开始关闭回显。一般批处理第一行都是这个 </span><br><span class="line">@<span class="built_in">echo</span> off  </span><br><span class="line">::从下一行开始打开回显</span><br><span class="line"><span class="built_in">echo</span> on </span><br><span class="line">::显示当前是 <span class="built_in">echo</span> off 状态还是 <span class="built_in">echo</span> on 状态 </span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line">::输出一个”回车换行”，空白行</span><br><span class="line"><span class="built_in">echo</span>.  </span><br></pre></td></tr></table></figure><h3 id="Rem和-命令"><a href="#Rem和-命令" class="headerlink" title="Rem和 :: 命令"></a>Rem和 :: 命令</h3><p>注释命令，相当于C语言中的/<em>——–</em>/，它不会被显示和执行，只是起一个注释的作用，便于别人阅读和你自己日后修改。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> hello world1</span><br><span class="line">Rem this is a comment.</span><br><span class="line">:: this is a comment.</span><br><span class="line"><span class="built_in">echo</span> hello world2</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="Pause-命令"><a href="#Pause-命令" class="headerlink" title="Pause 命令"></a>Pause 命令</h3><p>会暂停批处理的执行并在屏幕上显示Press any key to continue…的提示，等待用户按任意键后继续 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> hello world</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="Call命令"><a href="#Call命令" class="headerlink" title="Call命令"></a>Call命令</h3><p>调用另一个批处理程序，并且不终止父批处理程序。  如果不用call而直接调用别的批处理文件，那么执行完那个批处理文件后将无法返回当前文件并执行当前文件的后续命令。 </p><p>如果在脚本或批处理文件外使用 Call，它将不会在命令行起作用。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call test2.bat arg1 arg2 (调用同目录下的 test2.bat，且输入2个参数给他)</span><br></pre></td></tr></table></figure><h3 id="Start命令"><a href="#Start命令" class="headerlink" title="Start命令"></a>Start命令</h3><p>调用外部程序，所有的 DOS命令 和 命令行程序 都可以由 start命令 来调用。</p><p>start [“title”] [/dPath] [/i] [/min] [/max] [{/separate | /shared}] [{/low | /normal | /high | /realtime | /abovenormal | belownormal}] [/wait] [/b] [FileName] [parameters]</p><p>“title” 指定在“命令提示符”窗口标题栏中显示的标题。<br>/dpatch 指定启动目录。<br>/i 将 Cmd.exe 启动环境传送到新的“命令提示符”窗口。<br>/min 启动新的最小化窗口。<br>/max 启动新的最大化窗口。<br>/separate 在单独的内存空间启动 16 位程序。<br>/shared 在共享的内存空间启动 16 位程序。<br>/low 以空闲优先级启动应用程序。<br>/normal 以一般优先级启动应用程序。<br>/high 以高优先级启动应用程序。<br>/realtime 以实时优先级启动应用程序。<br>/abovenormal 以超出常规优先级的方式启动应用程序。<br>/belownormal 以低出常规优先级的方式启动应用程序。<br>/wait 启动应用程序，并等待其结束。<br>/b 启动应用程序时不必打开新的“命令提示符”窗口。除非应用程序启用 CTRL+C，否则将忽略 CTRL+C 操作。使用 CTRL+BREAK 中断应用程序。  </p><div class="tip"> 如果你所在程序的路径中带有空格，那么必须用“”把路径括起来，否则系统会提示找不到XX文件，另外，在运行某些程序时，需在路径的前面加一对空白的“”，表示创建一个空白的窗口，它指向的程序是XXXXXXXX。还有就是别忘了空格。  </div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start /MIN test2.bat arg1 arg2 (调用同目录下的 test2.bat，且输入2个参数给他，且本窗口最小化)</span><br><span class="line">e:\program files\xxx.exe</span><br><span class="line">start <span class="string">&quot;&quot;</span> <span class="string">&quot;D:/draw/photoshop.exe&quot;</span> 表示以常规窗口运行程序</span><br><span class="line">start /min <span class="string">&quot;&quot;</span> <span class="string">&quot;D:/draw/photoshop.exe&quot;</span> 表示以最小化窗口运行程序</span><br></pre></td></tr></table></figure><p> 等待某个程序允许完毕，也就是窗口关闭后，再打开下一个程序这可以这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start /w <span class="string">&quot;&quot;</span> <span class="string">&quot;D:/draw/photoshop.exe&quot;</span></span><br><span class="line">start <span class="string">&quot;&quot;</span> cmd.exe </span><br></pre></td></tr></table></figure><h3 id="Set命令"><a href="#Set命令" class="headerlink" title="Set命令"></a>Set命令</h3><p>显示、设置或删除变量。</p><p>显示变量：set 或 set s 前者显示批处理当前已定义的所有变量及其值，后者显示所有以s开头的变量及值。</p><p>设置和调用变量：例如set aa=abcd，就是把aa定义为abcd。如果要调用这个变量，就把aa两边加上个百分号。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> aa=abcd</span><br><span class="line"><span class="built_in">echo</span> %aa%</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>运行这段命令就会显示“abcd”。</p><p>删除变量：set aa= 此句命令即可删除变量aa。若变量aa已被定义，则删除变量aa；若aa尚未定义，则此句命令无实质意义。</p><p>需要说明的是，批处理中的变量是不区分类型的，不需要像C语言中的变量那样还要区分int、float、char等。比如执行set aa=345后，变量aa的值既可以被视为数字345，也可以被视为字符串345。</p><p>set命令具有扩展功能，如用作交互输入、字符串处理、数值计算等，属于高级命令范畴。</p><h3 id="If-命令"><a href="#If-命令" class="headerlink" title="If 命令"></a>If 命令</h3><p>if 表示将判断是否符合规定的条件，从而决定执行不同的命令。有三种格式: </p><ul><li><p>if [not] string1 compare-op string2 command1 [else command2]<br>if [not] “参数” == “字符串” 待执行的命令<br>参数如果等于(not表示不等，下同)指定的字符串，则条件成立，运行命令，否则运行下一句。(注意是两个等号)</p><p>比较操作符compare-op有以下几类：</p><p>== - 等于</p><p>EQU - 等于</p><p>NEQ - 不等于</p><p>LSS - 小于</p><p>LEQ - 小于或等于</p><p>GTR - 大于</p><p>GEQ - 大于或等于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;%1&quot;</span> == <span class="string">&quot;a&quot;</span> format a:</span><br><span class="line"><span class="keyword">if</span> &#123;%1&#125; == &#123;&#125; goto noparms</span><br></pre></td></tr></table></figure></li><li><p> if exist<br>语法: if [not] exist [路径]文件名 待执行的命令<br>如果有指定的文件，则条件成立，运行命令，否则运行下一句。<br>Sample: if exist config.sys edit config.sys (表示如果存在这文件，则编辑它，用很难看的系统编辑器)<br>Sample: if exist config.sys type config.sys (表示如果存在这文件，则显示它的内容) </p></li><li><p> if errorlevel number<br>语法: if [not] errorlevel &lt;数字&gt; 待执行的命令<br>如果程序返回值等于指定的数字，则条件成立，运行命令，否则运行下一句。(返回值必须按照从大到小的顺序排列) </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">XCOPY F:\test.bat D:\</span><br><span class="line">IF ERRORLEVEL 1 (ECHO 文件拷贝失败</span><br><span class="line">) Else IF ERRORLEVEL 0 ECHO 成功拷贝文件</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></li></ul><h3 id="Goto-命令"><a href="#Goto-命令" class="headerlink" title="Goto 命令"></a><strong>Goto 命令</strong></h3><p>指定跳转到标签，找到标签后，程序将处理从下一行开始的命令。</p><p>语法：goto label （label是参数，指定所要转向的批处理程序中的行。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &#123;%1&#125;==&#123;&#125; goto noparms</span><br><span class="line"><span class="keyword">if</span> &#123;%2&#125;==&#123;&#125; goto noparms（如果这里的<span class="keyword">if</span>、%1、%2你不明白的话，先跳过去，后面会有详细的解释。）</span><br><span class="line">@Rem check parameters <span class="keyword">if</span> null show usage</span><br><span class="line">:noparms</span><br><span class="line"><span class="built_in">echo</span> Usage: monitor.bat ServerIP PortNumber</span><br><span class="line">goto end</span><br></pre></td></tr></table></figure><p>标签的名字可以随便起，但是最好是有意义的字母啦，字母前加个：用来表示这个字母是标签，goto命令就是根据这个：来寻找下一步跳到到那里。最好有一些说明这样你别人看起来才会理解你的意图啊。</p><h3 id="choice-命令"><a href="#choice-命令" class="headerlink" title="choice 命令"></a>choice 命令</h3><p>choice 使用此命令可以让用户输入一个字符(用于选择)，从而根据用户的选择返回不同的 errorlevel，<br>然后配合 if errorlevel 选择运行不同的命令。<br>注意：choice命令为DOS或者Windows系统提供的外部命令，不同版本的choice命令语法会稍有不同，请用choice /?查看用法。<br>choice 使用此命令可以让用户输入一个字符，从而运行不同的命令。<br>使用时应该加/c:参数，c:后应写提示可输入的字符，之间无空格。它的返回码为1234……</p><p>Sample: choice /c:dme defrag,mem,end<br>将显示: defrag,mem,end[D,M,E]?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">choice /c:dme defrag,mem,end</span><br><span class="line"><span class="keyword">if</span> errorlevel 3 goto defrag (应先判断数值最高的错误码)</span><br><span class="line"><span class="keyword">if</span> errorlevel 2 goto mem</span><br><span class="line"><span class="keyword">if</span> errotlevel 1 goto end </span><br></pre></td></tr></table></figure><h3 id="for命令"><a href="#for命令" class="headerlink" title="for命令"></a>for命令</h3><p>for 命令是一个比较复杂的命令，主要用于参数在指定的范围内循环执行命令。 </p><p>for 命令，一般格式如下： </p><p>在cmd窗口中使用格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOR %variable IN (<span class="built_in">set</span>) DO <span class="built_in">command</span> [command-parameters]</span><br></pre></td></tr></table></figure><p>在批处理脚本中使用格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOR %%variable IN (<span class="built_in">set</span>) DO <span class="built_in">command</span> [command-parameters]</span><br></pre></td></tr></table></figure><p>在cmd窗口中使用，变量名必须用单%引用（即：%variable）；在批处理脚本中使用，变量名必须用双%引用（即：%%variable）。</p><p>for、in和do是for命令的三个关键字，缺一不可。</p><p>关键字in之后，do之前的括号不能省略。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> %%i <span class="keyword">in</span> (1 2 3 4 5) <span class="keyword">do</span> @<span class="built_in">echo</span> %%i</span><br><span class="line">pause&gt;nul</span><br></pre></td></tr></table></figure><h3 id="errorlevel"><a href="#errorlevel" class="headerlink" title="errorlevel"></a>errorlevel</h3><p>程序返回码<br>echo %errorlevel%<br>每个命令运行结束，可以用这个命令行格式查看返回码<br>用于判断刚才的命令是否执行成功<br>默认值为0，一般命令执行出错会设 errorlevel 为1 </p><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>设置cmd窗口的标题<br>title 新标题 #可以看到cmd窗口的标题栏变了 </p><h3 id="COLOR"><a href="#COLOR" class="headerlink" title="COLOR"></a>COLOR</h3><p>设置默认的控制台前景和背景颜色。<br>COLOR [attr]<br>attr 指定控制台输出的颜色属性<br>颜色属性由两个十六进制数字指定 – 第一个为背景，第二个则为<br>前景。每个数字可以为以下任何值之一:<br>0 = 黑色 8 = 灰色<br>1 = 蓝色 9 = 淡蓝色<br>2 = 绿色 A = 淡绿色<br>3 = 湖蓝色 B = 淡浅绿色<br>4 = 红色 C = 淡红色<br>5 = 紫色 D = 淡紫色<br>6 = 黄色 E = 淡黄色<br>7 = 白色 F = 亮白色<br>如果没有给定任何参数，该命令会将颜色还原到 CMD.EXE 启动时的颜色。这个值来自当前控制台窗口、/T 开关或DefaultColor 注册表值。如果用相同的前景和背景颜色来执行 COLOR 命令，COLOR 命令会将 ERRORLEVEL 设置为 1。<br>例如: “COLOR fc” 在亮白色上产生亮红色</p><h3 id="FIND"><a href="#FIND" class="headerlink" title="FIND"></a>FIND</h3><p>在文件中搜索字符串。FIND [/V] [/C] [/N] [/I] [/OFF[LINE]] “string” [[drive:][path]filename[ …]]</p><p>/V    显示所有未包含指定字符串的行。<br>/C    仅显示包含字符串的行数。<br>/N    显示行号。<br>/I    搜索字符串时忽略大小写。<br>/OFF[LINE] 不要跳过具有脱机属性集的文件。<br>“string”  指定要搜索的文字串，<br>[drive:][path]filename  指定要搜索的文件。</p><p>基本格式：find “要查找的字符串” 要查找的文件(不在当前目录则需要给出完整路径) </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find <span class="string">&quot;abc&quot;</span> d:\abc.txt 在abc.txt中查找字符串abc的行。</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>解决批处理显示中文乱码问题，可在批处理文件中加入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br></pre></td></tr></table></figure><h3 id="获取路径"><a href="#获取路径" class="headerlink" title="获取路径"></a>获取路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> 当前路径：%<span class="built_in">cd</span>%</span><br><span class="line"><span class="built_in">echo</span> 当前盘符：%~d0 </span><br><span class="line"><span class="built_in">echo</span> 当前盘符和路径：%~dp0 </span><br><span class="line"><span class="built_in">echo</span> 当前批处理全路径：%~f0 </span><br><span class="line"><span class="built_in">echo</span> 当前盘符和路径的短文件名格式：%~sdp0 </span><br><span class="line"><span class="built_in">echo</span> 当前CMD默认目录：%<span class="built_in">cd</span>% </span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="等待固定时间再执行"><a href="#等待固定时间再执行" class="headerlink" title="等待固定时间再执行"></a>等待固定时间再执行</h3><p>主要有两种方法：<br>第一种（等待时间不精确）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">命令1.......</span><br><span class="line">ping -n 5 127.1&gt;nul</span><br><span class="line">命令2.......</span><br></pre></td></tr></table></figure><p>第二种（时间较精确）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">命令1.......</span><br><span class="line"><span class="built_in">echo</span> wscript.sleep 5000&gt;%tmp%delay.vbs&amp;&amp;%tmp%delay.vbs&amp;&amp;del /q %tmp%delay.vbs</span><br><span class="line">命令2.......</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Windows批处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将Hexo托管到GitHub</title>
      <link href="2016/07/26/%E5%A6%82%E4%BD%95%E5%B0%86Hexo%E6%89%98%E7%AE%A1%E5%88%B0GitHub/"/>
      <url>2016/07/26/%E5%A6%82%E4%BD%95%E5%B0%86Hexo%E6%89%98%E7%AE%A1%E5%88%B0GitHub/</url>
      
        <content type="html"><![CDATA[<h2 id="如何将Hexo托管到GitHub"><a href="#如何将Hexo托管到GitHub" class="headerlink" title="如何将Hexo托管到GitHub"></a>如何将Hexo托管到GitHub</h2><h2 id="托管步骤"><a href="#托管步骤" class="headerlink" title="托管步骤"></a>托管步骤</h2><p><b>步骤1</b>：首先，你要先有一个GitHub账户，没有就去注册一个吧。注册完登录后，会在GitHub.com中看到一个New repository（新建仓库）。</p><p><b>步骤2</b>：创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxx.github.io，其中xxx就是你注册GitHub的用户名。</p><p><b>步骤3</b>：生成SSH添加到GitHub，在Git bash中输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱，这样GitHub才能知道你是不是它的账户。可以用以下两条命令检查你现在的用户名和邮箱：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH，输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>之后一路回车就行。SSH简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br><b>步骤4</b>：在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key把你的id_rsa.pub里面的信息复制进去，通过如下命令查看是否设置成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>完成这一步，我们就将hexo和GitHub关联起来了。<br><b>步骤5</b>：打开我们之前介绍的站点配置文件_config.yml，找到如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:[yourname]&#x2F;[yourname].github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>修改[yourname]为你的GitHub账户，然后输入安装deploy-git的命令 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>这样你才能用命令部署到GitHub。<br><b>步骤6</b>：最后输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><a href>hexo clean</a> 清除你之前生成的东西，也可以不加。<br><a href>hexo generate</a> (可缩写hexo g) 顾名思义，生成静态文章<br><a href>hexo deploy</a> (可缩写hexo d) 部署文章</p><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2><p>现在你的个人博客网站的地址默认是<a href>yourname.github.io</a>，如果你觉得这个网址逼格太low了，则可以设置自己的个人域名。<br><b>步骤1</b>：如果你没有自己的域名，你就需要花钱去注册或买一个自己域名，一般在域名购买网站的域名管理后台中你可以看到你购买的域名。你可以添加解析，将GitHub的服务器地址设置进去<br>192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。</p><div class="tip">解析线路一般选择默认，但你也可以用这个来做国内外分流。</div><p><b>步骤2</b>：登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名。然后在你的博客文件source中创建一个名为CNAME文件，不要后缀，写上你的域名。</p><p><b>步骤3</b>：最后重新部署一下即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客开源框架的使用</title>
      <link href="2016/07/02/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2016/07/02/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h2><p><a href="https://hexo.io/">Hexo</a>是一款基于<a href="https://nodejs.org/en/">Node.js</a>的开源博客框架。你可以用<a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin">MarkDown</a>（或者其他标记语言）来书写自己的博客，然后通过Hexo快速生成静态的博客站点，还可将其托管到<a href="https://github.com/">GitHub</a>上，使用起来十分方便。当然，Hexo也允许你应用许多漂亮的主题来装饰自己的站点，你可以通过<a href="https://hexo.io/themes/">Hexo主题市场</a>来获取你感兴趣的主题。</p><h2 id="Hexo博客站点搭建"><a href="#Hexo博客站点搭建" class="headerlink" title="Hexo博客站点搭建"></a>Hexo博客站点搭建</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>需要先安装配置以下两个环境，如已安装请忽略此步</p><ul><li><a href="https://git-scm.com/downloads">Git</a></li><li><a href="https://nodejs.org/en/">Node.js</a><div class="tip">这里建议均安装最新版本，因为Hexo是在不断更新的，需要依赖最新的环境。</div>安装完后注意检查环境变量的配置，在CMD中通过以下命令来检查是否配置成功：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v </span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>### 安装Hexo当以上环境都安装好后，就可以利用[npm](https://www.npmjs.com/)来安装Hexo了。新建一个文件夹，进入该文件夹然后右键Git Bash Here，在命令窗口输入以下命令安装Hexo：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>接着输入初始化Hexo命令，该命令会在该文件夹下新生成一个blog文件夹，放置Hexo主要的工作文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>进入blog文件夹，安装Hexo依赖的插件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>此时该文件夹的目录结构变为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>启动Hexo站点：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>在[http://localhost:4000/](http://localhost:4000/)中查看Hexo生成的默认站点，Hexo安装就大功告成了。### 配置Hexo这里介绍一些比较重要的配置打开blog文件夹下的_config.yml文件，可对Hexo站点进行一些基本的配置</li></ul><p><img src="/2016/07/02/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8_pic1.png" alt="配置截图"><br><b>title:</b>站点显示名称<br><b>description</b>:站点描述<br><b>author:</b>作者<br><img src="/2016/07/02/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8_pic2.png" alt="配置截图"><br><b>post_asset_folder:</b>站点部署的时候允许上传资源文件夹（如果要上传图片则设为true）<br><img src="/2016/07/02/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8_pic3.png" alt="配置截图"><br><b>theme:</b>设置主题的名称<br><img src="/2016/07/02/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8_pic4.png" alt="配置截图"><br><b>deploy:</b>远程部署站点的相关设置</p><h3 id="Hexo基本操作"><a href="#Hexo基本操作" class="headerlink" title="Hexo基本操作"></a>Hexo基本操作</h3><p><b>初始化站点</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><p>folder为你指定的文件夹名称，没有则自动创建<br><b>新建文章</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>如果没有指定layout，则会使用_config.yml中定义的默认layout；title为生成的.md文件兼文章的标题，文章标题也可到具体的文件中去修改，生成的文件位于/source/_posts/目录下</p><p><b>清理缓存和生成的文件</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清理缓存文件（db.json）和生成的文件(public)</p><p><b>生成网站的静态文件</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate 或 hexo g</span><br></pre></td></tr></table></figure><p><b>启动一个本地站点</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server 或 hexo s</span><br></pre></td></tr></table></figure><p>默认地址为<a href="http://localhost:4000/">http://localhost:4000/</a>，一般用于调试和查看效果<br><b>部署站点</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>需配合_config.yml中配置的deploy使用，将自己的本地站点文件部署到远程服务器或仓库。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
